
(defn end [e o i] e)
(defn b0 [p] (fn [e o i] (o p)))
(defn b1 [p] (fn [e o i] (i p)))

(defn app [xs f x]
  ((xs (fn [f x] x)
       (fn [p] (fn [f x] (app p (fn [k] (f (f k))) x)))
       (fn [p] (fn [f x] (app p (fn [k] (f (f k))) (f x)))))
   f x))

(defn b++ [xs]
  (fn [ex ox ix]
    (xs ex ix (fn [p]
                (ox (b++ p))))))

(defn add [xs ys]
  (app xs b++ ys))

(defn mul [xs ys]
  (xs end
      (fn [p]
        (b0 (mul p ys)))
      (fn [p]
        (add ys (b0 (mul p ys))))))

(defn to-int [ys]
  (ys 0
      (fn [p]
        (* 2 (to-int p)))
      (fn [p]
        (inc (* (to-int p) 2)))))

(defn from-int [s n]
  (cond (= 0 s)
        end

        (= 0 (bit-and n 1))
        (b0 (from-int (dec s) (bit-shift-right n 1)))

        (b1 (from-int (dec s) (bit-shift-right n 1)))))

(defn main [n]
  (let [x (from-int 32 (* 200 n))]
    (to-int (mul x x))))

(main $1)
