
(defn id [x] x)
(defn cst1 [x] 1)
(defn diag [x]
  (let [y x]
    (list y y)))

;; possible to reduce in 2 redexes
;; apply diag, apply cst1
;; (diag (cst1 (id 2)))

;; possible to reduce in 4 redexes
;; but not with weak evaluation
;; ((fn xr [x] (x (x a)))
;;  (fn yr [y] (id y)))

;; should be linear in $1
;; (((church $1) ((church 2) id)) q)


;; ;; id, 1 step
;; (id 5)

;; ;; constant, 2 step
;; (((fn [x] (fn [y] x)) 5) 1)

;; ;; native call, 2 steps
;; (((fn [x] (fn [y] (+ x y))) 2) 3)

 ;; boolean, 1 step
;; ((fn [x y z] (cond x y z)) nothing 1 2)


(defn d [x] (x x))
(defn I [x] x)

((fn d1 [x] (x x)) (fn l [h] ((fn d2 [x] (x x)) (h I))))

