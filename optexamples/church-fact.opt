
(defn id [x]
  x)

(defn succ [n]
  (fn [add-1]
    (fn [base]
      (add-1 ((n add-1) base)))))

(defn mult [n m]
  (fn [a]
    (n (m a))))

(defn pair [l r]
  (fn [z]
    (z l r)))

(defn fst [ff fs]
  ff)

(defn snd [ff fs]
  fs)

(defn nextfact [pr]
  (let [ss (succ (pr snd))]
    (pair (mult (pr fst) ss)
          ss)))

(defn fact [nf]
  (((nf nextfact) (pair (church 1) (church 0))) fst))

(((fact (church $1)) id) id)

;; (((fact (church $1)) inc) 0)


