

;; (add-ns se (git-dependency "https://github.com/Toccata-Lang/state-error.git"
;;                            "state-error.toc"
;;                            :sha "43bc6f4"))
;; (add-ns grmr (git-dependency "https://github.com/Toccata-Lang/grammar.git"
;;                              "grammar.toc"
;;                              :sha "e8eba87"))
;; (add-ns rdr (git-dependency "https://github.com/Toccata-Lang/reader.git"
;;                             "reader.toc"
;;                             :sha "b216649"))
;; (add-ns rd (git-dependency "https://github.com/Toccata-Lang/recursive-descent.git"
;;                            "recursive-descent.toc"
;;                            :sha "d61aa1e"))
;; (add-ns fio (git-dependency "https://github.com/Toccata-Lang/file-io.git"
;;                             "file-io.toc"
;;                             :sha "36fa952"))

(defn bap [k x]
  (inline C "
  return(bmiMutateAssoc((Value *)&emptyBMI, k_0, x_1, 0, 0));
"))

(defn bip [k x]
  (inline C "
  return(arrayNodeMutateAssoc((Value *)malloc_arrayNode(), k_0, x_1, 0, 0));
"))

(defn bop [k x]
  (inline C "
  HashCollisionNode* nd = malloc_hashCollisionNode(1);
  nd->array[0] = k_0;
  nd->array[1] = x_1;
  return((Value *)nd);
"))

(deftype Plover [u v])

(defn f [p]
  (let [l (list p)]
    (deliver p l)
    l))

(defn g [p]
  (extract (deliver p (list p p))))

(defn h [p]
  (extract (deliver p p)))

(main [_]
  (let [grammar (let [p (promise)
                      g (maybe (list p "" (list p) 'a (maybe p)))
                      v [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 (subs "123" 1)
                         1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 'a 'b 'c 'd 'e 'f g 'h
                         (bap 1 (bip 3 (bop 8 p)))]
                      f (fn [x]
                          v)
                      plove (Plover f 8)]
                  (deliver p plove)
                  plove)
        ;; grmr (ana rd/terminate-string grammar)
        ;; _ (print-err 'grmr grmr)
        ;; [raw] ((cata rd/make-parser grmr se/state-error) {})
        ;; _ (print-err 'raw raw)
        ;; collapsed (cata rd/collapse-branches raw)
        ;; _ (print-err 'collapsed collapsed)
        ;; parser (rd/parser grammar)
        ]
    (prefs "p" grammar)
    " ")
  (f (promise))
  (g (promise))
  (h (promise))
  (print-err 'done))
