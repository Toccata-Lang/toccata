
(defn id [x]
  x)

(def succ (fn [n]
            (fn [add-1]
              (fn [base]
                (add-1 ((n add-1) base))))))

(def mult (fn [n m]
            (fn [a]
              (n (m a)))))

(def pair (fn [l r]
            (fn [z]
              (z l r))))

(def fst (fn [ff fs]
           ff))

(def snd (fn [ff fs]
           fs))

(def nextfact (fn [pr]
                ((fn [ss]
                   (pair (mult (pr fst) ss)
                         ss))
                 (succ (pr snd)))))

(def fact (fn [nf]
            (((nf nextfact) (pair (church 1) (church 0))) fst)))

;; (grph (fact (church 3)))

(((fact (church 30)) id) id)

