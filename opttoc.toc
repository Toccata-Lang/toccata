
(add-ns c (git-dependency "https://github.com/Toccata-Lang/constraints.git"
                          "constraints.toc"
                          :sha "d1d3464"))
(add-ns ast (git-dependency "https://github.com/Toccata-Lang/ast.git"
                            "ast.toc"
                            :sha "82e2285"))
(add-ns rdr (git-dependency "https://github.com/Toccata-Lang/reader.git"
                            "reader.toc"
                            :sha "12ce161"))
(add-ns rd (git-dependency "https://github.com/Toccata-Lang/recursive-descent.git"
                           "recursive-descent.toc"
                           :sha "d61aa1e"))
(add-ns grmr (git-dependency "https://github.com/Toccata-Lang/grammar.git"
                             "grammar.toc"
                             :sha "e8eba87"))
(add-ns fio (git-dependency "https://github.com/Toccata-Lang/file-io.git"
                            "file-io.toc"
                            :sha "36fa952"))
(add-ns se (git-dependency "https://github.com/Toccata-Lang/state-error.git"
                           "state-error.toc"
                           :sha "43bc6f4"))
(add-ns sys (git-dependency "https://github.com/Toccata-Lang/system.git"
                            "system.toc"
                            :sha "13097ff"))

(def se-nop (se/state-error '_))

(defn se-debug [& msg]
  (map se-nop
       (fn [_]
         (apply print-err msg))))

(def lflf "\n\n")
(def redex-count (agent 0))

(defn reduction [n line expr]
  ;; (print-err 'reduction _LINE_ line expr)
  (inc n))

(defprotocol Evaluation
  (redex [expr defs hist])

  (strong-norm [expr defs hist])

  (do-app [expr app-expr defs hist]
    ;; (.call-target app-expr expr)
    ))

(defprotocol DotOut
  (grph-down [expr]
    (assert-result r (instance? se/StateError r))
    (se/state-error expr))

  (grph-up [expr]
    (assert-result r (instance? se/StateError r))))

(defn grph
  ([expr] (grph expr {}))
  ([expr env]
   ((hylo grph-down grph-up expr se/state-error) (list env))
   expr))

(deftype Self []
  Stringable
  (string-list [_]
    (list "self")))

(extend-type String
  Container
  (map [s _ embed]
    (print-err 'blewto _LINE_ s)
    (abort)))

(def self (Self))

(defn get-val [k]
  (se/get-in-val [0 k]))

(defn dissoc-val [k]
  (se/update-state (fn [st]
                     (cons (either (map (first st) (fn [m]
                                                     (dissoc m k)))
                                   {})
                           (rest st)))))

(defn set-val [k v]
  (map (se/update-state (fn [st]
                          (cons (either (map (first st) (fn [m]
                                                          (assoc m k v)))
                                        {k v})
                                (rest st))))
       (fn [_]
         v)))

(defn push-env []
  (se/update-state (fn [st]
                     (cons (either (first st)
                                   {})
                           st))))

(defn pop-env []
  (se/update-state rest))

(defn nip-env [vs]
  (se/update-state (fn [[fst snd & tail]]
                     (-> (reduce vs fst dissoc)
                         (comp (select-keys snd vs))
                         (cons tail)))))

(defn reduce-fn-ast [defs hist f]
  (let [redex-bod (fn [arity expr]
                    (redex expr defs
                           (comp hist
                                 (fn [bod]
                                   ;; TODO: no mult. arities
                                   (.arities f [(.body arity
                                                       [bod])])))))]
    (.arities f (map (.arities f)
                     (fn [arity]
                       (.body arity
                              (map (.body arity)
                                   (partial redex-bod arity))))))))

(deftype Deferred [expr weak]
  Stringable
  (string-list [_]
    ;; (either (map (delivered weak) string-list))
    (list "|" (str (mod (address-of weak) 1000))
          (cond (delivered weak) "*" "")
          " " (str expr) "|"))

  Container
  (map [x f]
    (.expr x (map expr f)))

  (map [x f embed]
    (map (f expr) (partial .expr x)))

  Eq
  (=* [x y]
    (and (instance? Deferred y)
         (=* expr (.expr y))))

  ast/AST
  (ast/prep-replace [x env]
    (either (map (delivered weak)
                 (fn [weak-expr]
                   [(RecurseWith weak-expr) env]))
            [(RecurseWith x) env]))

  Evaluation
  (do-app [x app-expr defs hist]
    (do-app (either (delivered weak)
                    (let [weak-form (redex expr defs
                                           (comp hist (partial .expr x)))]
                      (deliver weak weak-form)
                      (println "subgraph" (gensym "cluster") "{")
                      (println (str "graph [color=none, label=\"" (mod (address-of weak) 1000)
                                    " delivered " _LINE_ "\"]"))
                      (grph (hist weak-form) defs)
                      (println "}")
                      weak-form))
            app-expr defs hist))

  (redex [x defs hist]
    (either (delivered weak)
            (let [weak-form (redex expr defs
                                   (comp hist (partial .expr x)))]
              (deliver weak weak-form)
              (println "subgraph" (gensym "cluster") "{")
              (println (str "graph [color=none, label=\"" (mod (address-of weak) 1000)
                            " delivered " _LINE_ "\"]"))
              (grph (hist weak-form) defs)
              (println "}")
              weak-form)))

  DotOut
  (grph-down [x]
    (either (map (delivered weak) grph-down)
            (comp (map (get-val (address-of weak))
                       (fn [node-id]
                         (reify
                           Container
                           (map [this _ embed]
                             (embed this))

                           DotOut
                           (grph-up [_]
                             (se/state-error (str node-id ":n"))))))
                  (for [node-id (set-val (address-of weak) (gensym "dup"))]
                    (do
                      (println node-id (str "[label=\"\", xlabel=\""
                                            (str (mod (address-of weak) 1000)) "\",")
                               "height=0.3, width=0.3, fixedsize=true, shape=triangle,"
                               " orientation=180]")
                      x)))))

  (grph-up [x]
    (for [node-id (get-val (address-of weak))
          :let [arg-end (str node-id ":sw")]
          _ (cond (instance? Sequence expr)
                  (do
                    (print-err 'graphing-error _LINE_ expr)
                    (abort))

                  (instance? String expr)
                  (se/state-error (println arg-end "--" expr))

                  (comp (map (get-val expr)
                             (fn [endp]
                               (println arg-end "--" endp)))
                        (set-val expr arg-end)))]
      (str node-id ":n"))))

(defn defer [expr]
  (cond (or (instance? ast/call-ast expr)
            (instance? ast/binding-ast expr)
            (instance? ast/fn-ast expr))
        (Deferred expr (promise))

        expr))

(defn lazy
  ([expr defs] (lazy expr defs identity))
  ([expr defs hist]
   ;; (print-err 'expr _LINE_ expr)
   (let [new-expr (strong-norm (redex expr defs hist) defs hist)]
     (either (or (instance? Fn new-expr)
                 (= new-expr expr))
             (lazy new-expr defs hist)))))

(defn fresh [x]
  (reify
    Stringable
    (string-list [_]
      (list (str x)))

    Container
    (map [this f]
      this)

    (map [this f embed]
      (embed this))

    Eq
    (=* [x y]
      (identical x y))

    ast/AST
    (ast/vars [_] {})

    Evaluation
    (redex [this defs hist]
      this)

    (strong-norm [this defs hist]
      this)

    (do-app [x app-expr defs hist]
      (.call-target app-expr x))

    DotOut
    (grph-up [_]
      (let [node-id (gensym (str x))]
        (println node-id (str "[label=\"" x "\"]"))
        (se/state-error (str node-id ":n"))))))

(def CoreType (any-of Integer Fn Vector List Maybe))

(extend-type CoreType
  ast/AST
  (ast/vars [_]
    {})

  Evaluation
  (redex [x defs hist]
    x)

  (strong-norm [x defs hist]
    x))

(extend-type Integer
  Container
  (map [n _] n)
  (map [n _ embed]
    (embed n))

  DotOut
  (grph-up [n]
    (let [node-id (gensym "int")]
      (println node-id (str "[label=\"" (str n) "\", ordering=out]"))
      (se/state-error (str node-id)))))

(extend-type ast/tagged-symbol
  Evaluation
  (redex [ast defs hist]
    (either (get defs ast)
            ast))
  
  (strong-norm [ast defs hist]
    (either (get defs ast)
            ast))

  (do-app [ast app-expr defs hist]
    (.call-target app-expr ast))

  DotOut
  (grph-up [sym]
    (comp (get-val sym)
          (se/state-error sym))))

(extend-type ast/integer-ast
  Evaluation
  (redex [ast defs hist]
    (.int ast))

  (strong-norm [ast defs hist]
    (.int ast))

  DotOut
  (grph-up [n]
    (let [node-id (gensym "int")]
      (println node-id (str "[label=\"" (str (.int n)) "\", ordering=out]"))
      (se/state-error (str node-id)))))

(extend-type Fn
  Container
  (map [f _]
    f)

  (map [f _ embed]
    (embed f))

  Evaluation
  (do-app [f app-expr defs hist]
    ;; a Fn can only be applied to CoreType values, so the args
    ;; have to be completely reduced with no free variables
    ;; 'grpbh' is the exception as it can be applied to ast's as well.
    (let [args (.args app-expr)
          new-args (map (zip-lists args (range (count args)))
                        (fn [[arg idx]]
                          (lazy arg defs (comp hist (fn [new-arg]
                                                      (either (map (store (vec args) idx new-arg)
                                                                   (partial .args app-expr))
                                                              (do
                                                                (print-err 'boom _LINE_)
                                                                (abort))))))))]
      (cond (or (identical f grph)
                (identical f print-err)
                (identical f fresh)
                (every new-args (partial instance? CoreType)))
            (let [r (apply f new-args)]
              ;; (send redex-count reduction _LINE_ new-call)
              (println "subgraph" (gensym "cluster") "{")
              (println (str "graph [color=none, label=\"Fn/do-app " _LINE_ "\"]"))
              (grph (hist r) defs)
              (println "}")
              r)

            (.call-target app-expr f))))

  DotOut
  (grph-up [expr]
    (let [node-id (gensym "fn")
          x-end (str node-id ":sw")
          y-end (str node-id ":se")]
      (println node-id (str "[label=\"" (fn-name expr) "\", ordering=out]"))
      (se/state-error (str node-id ":n")))))

(deftype GlobalFn [var]
  Stringable
  (string-list [_]
    (list (str "<" var ">")))

  Container
  (map [x f]
    x)

  (map [x f embed]
    (embed x))

  ast/AST
  (ast/vars [_]
    {})

  Evaluation
  (redex [ast defs hist]
    ast)

  (strong-norm [ast defs hist]
    ast)

  (do-app [ast app-expr defs hist]
    (either (map (get defs var)
                 (fn [f]
                   (do-app f app-expr defs hist)))
            (.call-target app-expr ast)))

  DotOut
  (grph-down [g]
    (se/state-error g))

  (grph-up [g]
    (let [node-id (gensym "gbl")]
      (println node-id (str "[label=\"" g "\"]"))
      (se/state-error (str node-id)))))

(defn church [n]
  (let [fn-sym (ast/tag (symbol (str n)))
        param-x (ast/tag (gensym "px"))
        x (ast/tag (gensym "x"))
        y (ast/tag (gensym "y"))]
    (ast/fn-ast fn-sym
                [(ast/fn-arity-ast
                  fn-sym
                  (ast/params [param-x])
                  ast/no-comment
                  [(ast/fn-ast (ast/tag (symbol (str "inner-" n)))
                               [(cond (= 0 n)
                                      (ast/fn-arity-ast c/no-symbol
                                                        (ast/params [y])
                                                        ast/no-comment
                                                        [y]
                                                        {})

                                      (= 1 n)
                                      (ast/fn-arity-ast c/no-symbol
                                                        (ast/params [y])
                                                        ast/no-comment
                                                        [(ast/call-ast param-x [y])]
                                                        {})

                                      (ast/fn-arity-ast c/no-symbol
                                                        (ast/params [y])
                                                        ast/no-comment
                                                        [
                                                         (reduce (range n) y
                                                                 (fn [expr _]
                                                                   (ast/call-ast param-x [expr])))

                                                         ;; (ast/binding-ast
                                                         ;;  x param-x
                                                         ;;  [(reduce (range n) y
                                                         ;;           (fn [expr _]
                                                         ;;             (ast/call-ast x [expr])))])
                                                         ]
                                                        {}))])]
                  {})])))

(extend-type ast/block-comment-ast
  Evaluation
  (redex [expr defs hist]
    expr)

  (strong-norm [expr defs hist]
    expr))

(extend-type ast/binding-ast
  ;; ast/AST
  ;; (ast/prep-replace [x env]
  ;;   (let [expr (.expr x)]
  ;;     (either (for [new-expr (and (instance? ast/tagged-symbol expr)
  ;;                                 (get env expr))
  ;;                   ;; TODO: don't discard side-effecting expressions in the continuation
  ;;                   cont-result (last (.cont x))]
  ;;               (let [new-env (assoc env (.id x) (defer new-expr))]
  ;;                 (send redex-count reduction _LINE_ (.expr x new-expr))
  ;;                 [(RecurseWith cont-result) new-env]))
  ;;             [(RecurseWith x) env]))) 

  Evaluation
  (redex [expr defs hist]
    (either (map (last (.cont expr))
                 (fn [cont-expr]
                   (let [cont-expr (ast/simple-replace cont-expr {(.id expr) (defer (.expr expr))})]
                     (either (map (instance? ast/fn-ast cont-expr)
                                  (fn [f]
                                    (print-err 'finally _LINE_)
                                    (abort)
                                    (.arities f (map (.arities f)
                                                     (fn [arity]
                                                       (.body arity
                                                              (map (.body arity)
                                                                   (fn [expr]
                                                                     ;; TODO: no mult. arities
                                                                     (redex expr defs
                                                                            (comp hist
                                                                                  (partial .arities f)
                                                                                  (partial .body arity)
                                                                                  vector))))))))))
                             cont-expr))))
            (do
              (print-err 'interp-err _LINE_ expr)
              (abort))))

  (strong-norm [expr defs hist]
    (-> expr
        (.expr (lazy (.expr expr) defs (comp hist (partial (.expr expr)))))
        (.cont (map (.cont expr) (fn [expr]
                                   ;; TODO: doesn't account for side effects in continuation
                                   (lazy expr defs (comp hist (partial .cont expr) vector)))))))

  (do-app [expr app-expr defs hist]
    (let [init-cont (butlast (.cont expr))
          last-cont (either (last (.cont expr))
                            (do
                              (print-err 'interp-err _LINE_ expr
                                         lflf 'app-expr app-expr)
                              (abort)))
          new-cont (comp init-cont [(.call-target app-expr last-cont)])]
      ;; TODO: don't know about plain 'hist' here
      (redex (.cont expr new-cont) defs hist)))

  DotOut
  (grph-down [expr]
    (let [node-id (gensym "bnd")
          endpoint (str node-id ":n")]
      (println node-id (str "[label=\"\",")
               "height=0.3, width=0.3, fixedsize=true, shape=triangle, orientation=180]")
      (for [_ (push-env)
            _ (set-val self node-id)
            _ (se/traverse (ast/all-syms (.id expr))
                           (fn [id]
                             (set-val id endpoint)))]
        expr)))

  (grph-up [expr]
    (for [node-id (get-val self)
          :let [arg-end (str node-id ":sw")
                new-ids (reduce (ast/all-syms (.id expr)) [self]
                                (fn [new-ids id]
                                  (cond (instance? ast/tagged-symbol id)
                                        (conj new-ids id)

                                        (comp new-ids id))))]
          _ (nip-env new-ids)
          _ (cond (instance? Sequence (.expr expr))
                  (do
                    (print-err 'graphing-error _LINE_ expr)
                    (abort))

                  (instance? String (.expr expr))
                  (se/state-error (println arg-end "--" (.expr expr)))

                  (comp (map (get-val (.expr expr))
                             (fn [endp]
                               (println arg-end "--" endp)))
                        (set-val (.expr expr) arg-end)))]
      (either (last (.cont expr))
              ""))))

(extend-type ast/fn-arity-ast
  Evaluation
  (strong-norm [expr defs hist]
    (let [new-bod (map (.body expr) (fn [expr]
                                      ;; TODO: doesn't account for side effects in body
                                      (lazy expr defs (comp (partial .body expr) vector))))
          new-expr (.body expr new-bod)]
      new-expr))

  DotOut
  (grph-down [f]
    (for [_ (push-env)
          node-id (set-val self (gensym "fn"))
          _ (se/traverse (ast/all-syms (.params f))
                         (fn [v]
                           (set-val v (str node-id ":sw"))))]
      (do
        (println node-id (str "[label=\"λ " (cond (= c/no-symbol (.fn-sym f))
                                                  ""
                                                  (.fn-sym f))
                              "\"]"))
        f)))

  (grph-up [f]
    (for [node-id (get-val self)
          :let [body (either (last (.body f))
                             (ast/tag '_))]
          _ (cond (instance? ast/tagged-symbol body)
                  (comp (for [body-node (get-val body)]
                          (println (str node-id ":s") "--" body-node))

                        (set-val body (str node-id ":s")))

                  (se/state-error (println (str node-id ":s") "--" body)))
          _ (pop-env)]
      (str node-id ":n"))))

(defn apply-arity [expr app-expr defs hist]
  (let [args (.args app-expr)
        new-env (reduce (zip-lists (.fixed (.params expr)) args) {}
                        (fn [m [k v]]
                          (assoc m k (defer v))))]
    (send redex-count reduction _LINE_ (ast/call-ast expr args))
    ;; (print-err 'applying _LINE_ (str "(fn " (.fn-sym expr) expr ")")
    ;;            lflf 'args args)
    ;; fully reduce all but the last expression for any side effects
    ;; TODO: but what if they have free-vars
    ;; (-> (.body expr)
    ;;     butlast
    ;;     (map (fn [expr]
    ;;            (lazy expr defs))))
    (either (map (last (.body expr))
                 (fn [body]
                   (let [new-bod (ast/simple-replace body new-env)]
                     (println "subgraph" (gensym "cluster") "{")
                     (println (str "graph [color=none, label=\"apply-arity " _LINE_ "\"]"))
                     (grph (hist new-bod) defs)
                     (println "}")
                     (either (map (instance? ast/fn-ast new-bod)
                                  (partial reduce-fn-ast defs hist))
                             (redex new-bod defs hist)))))
            app-expr)))


(extend-type ast/fn-ast
  Evaluation
  (redex [expr defs hist]
    expr)

  (strong-norm [ast defs hist]
    ;; must apply strong-norm to each of the arities
    (.arities ast (map (.arities ast) (fn [arity]
                                        (strong-norm arity defs
                                                     ;; TODO: doesn't account for mult. arities
                                                     (comp hist (partial .arities ast) vector))))))

  (do-app [tgt call defs hist]
    (let [args (.args call)
          arg-count (count args)]
      (either (map (some (.arities tgt)
                         (fn [arity]
                           ;; TODO: variadic will be handled here
                           (and (= (count (.params arity)) arg-count)
                                (maybe arity))))
                   (fn [arity]
                     (apply-arity arity call defs
                                  hist)))
              (do
                (print-err 'no-arity-found (ast/location call) arg-count
                           lflf tgt)
                (.call-target call tgt)))))

  DotOut
  (grph-up [expr]
    (se/state-error (either (first (.arities expr))
                            ""))))

(extend-type ast/NestedCond
  Evaluation
  (redex [ast defs hist]
    (let [test (redex (.test ast) defs (comp hist (partial .test ast)))]
      (cond (instance? Maybe test)
            (cond test
                  (redex (.clause ast) defs (comp hist (partial .clause ast)))

                  (redex (.cont ast) defs (comp hist (partial .cont ast))))
            (.test ast test))))

  (strong-norm [ast defs hist]
    ;; TODO: not convinced this is right
    (redex ast defs hist)))

(extend-type ast/call-ast
  ;; ast/AST
  ;; (ast/prep-replace [x env]
  ;;   (let [tgt (.call-target x)
  ;;         args (.args x)
  ;;         arg-count (count args)]
  ;;     (either (for [new-tgt (and (instance? ast/tagged-symbol tgt)
  ;;                                (get env tgt))
  ;;                   :when (instance? ast/fn-ast new-tgt)
  ;;                   arity (some (.arities new-tgt)
  ;;                               (fn [arity]
  ;;                                 ;; TODO: variadic will be handled here
  ;;                                 (and (= (count (.params arity)) arg-count)
  ;;                                      (maybe arity))))
  ;;                   ;; TODO: don't discard side-effecting expressions in the body
  ;;                   arity-result (last (.body arity))]
  ;;               (let [new-env (reduce (zip-lists (.fixed (.params arity)) args)
  ;;                                     env
  ;;                                     (fn [m [k v]]
  ;;                                       (assoc m k (defer v))))]
  ;;                 (send redex-count reduction _LINE_ (ast/call-ast new-tgt args))
  ;;                 [(RecurseWith arity-result) new-env]))
  ;;             [(RecurseWith x) env])))

  Evaluation
  (redex [expr defs hist]
    (let [new-tgt (redex (.call-target expr) defs
                         (comp hist (partial .call-target expr)))]
      (do-app new-tgt expr defs hist)))

  (strong-norm [expr defs hist]
    (let [normd-lam (redex (.call-target expr) defs
                           (comp hist (partial .call-target expr)))
          args (.args expr)
          new-args (map (zip-lists args (range (count args)))
                        (fn [[arg idx]]
                          (redex arg defs
                                 (comp hist
                                       (partial .args expr)
                                       (fn [new-arg]
                                         (either (store (vec args) idx
                                                        new-arg)
                                                 (do
                                                   (print-err 'boom _LINE_)
                                                   (abort))))))))]
      (-> expr
          (.call-target normd-lam)
          (.args new-args))))

  (do-app [expr app-expr defs hist]
    (.call-target app-expr expr))

  DotOut
  (grph-down [expr]
    (let [node-id (gensym "app")]
      (println node-id (str "[label=\"@\", ordering=out]"))
      (for [_ (push-env)
            _ (set-val self node-id)]
        expr)))

  (grph-up [expr]
    (for [node-id (get-val self)
          :let [tgt (.call-target expr)
                tgt-end (str node-id ":sw")
                arg-end (str node-id ":se")]
          _ (pop-env)]
      (do
        (println tgt-end "--" tgt)
        (map (.args expr) (fn [arg]
                            (println arg-end "--" arg)))
        (str node-id ":n")))))


(def core-env {(ast/tag 'church) church
               (ast/tag 'fresh) fresh
               (ast/tag 'print-err) print-err
               (ast/tag 'inc) inc
               (ast/tag 'dec) dec
               (ast/tag '+) +
               (ast/tag '-) -
               (ast/tag '*) *
               (ast/tag 'range) range
               (ast/tag 'cons) cons
               (ast/tag 'first) first
               (ast/tag 'rest) rest
               (ast/tag 'empty-list) empty-list
               (ast/tag 'list) list
               (ast/tag 'empty?) empty?
               (ast/tag 'nil) nothing
               (ast/tag '=) =
               (ast/tag 'bit-shift-right) bit-shift-right
               (ast/tag 'bit-and) bit-and
               (ast/tag 'grph) grph})

(defn eval-exprs [exprs]
  (let [defs (-> exprs
                 (filter (partial instance? ast/definition-ast))
                 (reduce core-env
                         (fn [defs def]
                           (either (-> (.value-exprs def)
                                       (remove (partial instance? ast/NoCode))
                                       last
                                       (map (fn [val-ast]
                                              (assoc defs (.sym def) val-ast))))
                                   defs))))
        global-fns (reduce (vec defs) {} (fn [m [s v]]
                                           (cond (or (instance? Fn v)
                                                     (instance? ast/fn-ast v))
                                                 (assoc m s (GlobalFn s))

                                                 m)))
        defs (map-vals defs (fn [def]
                              (either (instance? CoreType def)
                                      (ast/simple-replace def global-fns))))
        exprs (-> exprs
                  (remove (partial instance? ast/definition-ast))
                  (map (fn [expr]
                         (let [expr (ast/simple-replace expr global-fns)
                               fvs (-> (ast/free-syms expr)
                                       (dissoc (ast/tag (symbol "$1"))))]
                           (ast/simple-replace expr (reduce (keys fvs) {}
                                                            (fn [m fv]
                                                              (assoc m fv (fresh fv)))))))))]
    (map exprs (fn [expr]
                 (let [start-time (sys/clock_gettime)
                       p (promise)]
                   (send redex-count (fn [_] 0))
                   (println "subgraph" (gensym "cluster") "{")
                   (println (str "graph [color=none, label=\"initial " _LINE_ "\"]"))
                   (grph expr defs)
                   (println "}")
                   (let [final (lazy expr defs)
                         _ (do
                             (println "subgraph" (gensym "cluster") "{")
                             (println (str "graph [color=none, label=\"final " _LINE_ "\"]"))
                             (grph final defs)
                             (println "}"))
                         elapsed (sys/time-delta start-time (sys/clock_gettime))
                         _ (send redex-count (partial deliver p))
                         redexes (extract p)]
                     (print-err 'final _LINE_ final
                                "\n" (str elapsed ", " redexes))
                     (either (map (get defs (ast/tag (symbol "$1")))
                                  (fn [test-cnt]
                                    (println (str "comment=\"stats " test-cnt ", "
                                                  elapsed ", " redexes "\""))
                                    ;; (println (str "stats " test-cnt ", "
                                    ;;               elapsed ", " redexes))
                                    ))
                             '_)
                     ))))))

(def parse-forms
  (rd/parser
   (grmr/none-or-more rdr/top-level)))

(main [args]
  (println "graph sharing {")
  (println "node [shape=none, height=0, width=0]"
           "\nedge [arrowhead=none]")
  (let [[_ file-name & cnt-str] args
        test-cnt (either (map (first cnt-str) str-to-int)
                         3)]
    (either (map (fio/file-in file-name)
                 (fn [file-in]
                   ;; if opened, parse and evaluate
                   (let [parse-result (parse-forms {'file-name file-name
                                                    'line-number 1}
                                                   (lazy-list file-in))]
                     (either (map (instance? rd/ParserError parse-result)
                                  (fn [r]
                                    (print-err (.msg r))
                                    (abort)))
                             (let [final (eval-exprs (comp [(ast/definition (ast/tag (symbol "$1"))
                                                              (list test-cnt))]
                                                           (.value parse-result)))
                                   ;; elapsed (sys/time-delta start-time (sys/clock_gettime))
                                   ;; _ (send redex-count (partial deliver p))
                                   ;; redexes (extract p)
                                   ]
                               ;; (print-err 'final _LINE_ final
                               ;;            "\n" (str test-cnt ", " elapsed ", " redexes))
                               ;; (println 'stats (str test-cnt ", " elapsed ", " redexes))
                               (print-err 'done)
                               )))))

            ;; or tell everyone it couldn't be
            (print-err str "Could not find/open " file-name))
    (println  "}\n")
    )
  (print-err 'done))
