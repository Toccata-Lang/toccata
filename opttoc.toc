
(add-ns se (git-dependency "https://github.com/Toccata-Lang/state-error.git"
                           "state-error.toc"
                           :sha "43bc6f4"))
(add-ns c (git-dependency "https://github.com/Toccata-Lang/constraints.git"
                          "constraints.toc"
                          :sha "d1d3464"))
(add-ns ast (git-dependency "https://github.com/Toccata-Lang/ast.git"
                            "ast.toc"
                            :sha "b9c6dfa"))
(add-ns rdr (git-dependency "https://github.com/Toccata-Lang/reader.git"
                            "reader.toc"
                            :sha "0ca7f06"))
(add-ns rd (git-dependency "https://github.com/Toccata-Lang/recursive-descent.git"
                           "recursive-descent.toc"
                           :sha "d61aa1e"))
(add-ns grmr (git-dependency "https://github.com/Toccata-Lang/grammar.git"
                             "grammar.toc"
                             :sha "e8eba87"))
(add-ns fio (git-dependency "https://github.com/Toccata-Lang/file-io.git"
                            "file-io.toc"
                            :sha "36fa952"))

(defn hylo-env [descend ascend env x]
  (let [[y new-env] (descend x env)]
    (ascend (map y (fn [inner-x]
                     (hylo-env descend ascend new-env inner-x)))
            new-env)))

(defprotocol Evaluation
  (pre-eval [ast env]
    [ast env])

  (eval [ast env]
    ;; (print-err 'ast _LINE_ ast
    ;;            "\n\n" 'env env)
    )

  (eval-app [f call env]
    (.call-target call f)))

(extend-type Vector
  Evaluation
  (eval [ast env]
    ast))

(extend-type c/NoSymbol
  Evaluation
  (eval [x _]
    x))

(deftype Skip [expr]
  Stringable
  (string-list [_]
    (list "(Skip " (str expr) ")"))

  Container
  (map [e f]
    expr)

  (map [e f embed]
    (embed expr)))

(extend-type ast/integer-ast
  Evaluation
  (eval [n env]
    (let [loc (ast/location n)
          fn-sym (ast/tag (symbol (str n)) loc)
          x (ast/tag (gensym "x") loc)
          y (ast/tag (gensym "y") loc)
          ;; dups (-> (range (.int n))
          ;;          (map (fn [n]
          ;;                 (ast/tag (symbol (str 'a (inc n))) loc)))
          ;;          vec)
          ]
      (ast/fn-ast fn-sym
                  [(ast/fn-arity
                    fn-sym
                    (ast/params [x])
                    ast/no-comment
                    [(ast/fn-ast c/no-symbol
                                 [(ast/fn-arity
                                   c/no-symbol
                                   (ast/params [y])
                                   ast/no-comment
                                   [(reduce (range (.int n)) y
                                            (fn [expr _]
                                              (ast/call-ast x [expr])))])])])]))))

(extend-type ast/fn-arity-ast
  Evaluation
  (pre-eval [ast env]
    [ast (dissoc-all env (ast/all-syms (.params ast)))])

  (eval [ast env]
    ast))

(extend-type ast/fn-ast
  Evaluation
  (eval [ast _]
    ast)

  (eval-app [tgt call env]
    (let [args (.args call)
          arg-count (count args)]
      (either (for [arity (or (some (.arities tgt)
                                    (fn [arity]
                                      (and (= (count (.params arity)) arg-count)
                                           (maybe arity))))
                              (do
                                (print-err 'no-arity-found (ast/location call) arg-count
                                           "\n\n" tgt)
                                nothing))]
                (let [new-env (-> arity
                                  .params
                                  .fixed
                                  (zip-lists args)
                                  (reduce {} (fn [m [k v]]
                                               (assoc m k v))))
                      new-body (ast/simple-replace (.body arity) new-env)
                      r (either (last (hylo-env pre-eval eval env new-body))
                                call)]
                  ;; (print-err 'expr _LINE_ (.call-target call)
                  ;;            "\n\n" 'args (.args call)
                  ;;            "\n\n" 'env (keys env)
                  ;;            ;; "\n\n" 'new-env new-env
                  ;;            "\n\n" 'result r)
                  ;; (abort)
                  r))
              (.call-target call tgt)))))

(extend-type ast/call-ast
  Evaluation
  (pre-eval [ast env]
    [(.args ast (map (.args ast) Skip))
     env])

  (eval [expr env]
    (eval-app (.call-target expr) expr env)))

(extend-type ast/tagged-symbol
  Evaluation
  (eval [s env]
    (either (get env s)
             s)))

(def parse-forms
  (rd/parser
   (grmr/none-or-more rdr/top-level)))

(defn eval-expr [expr defs]
  (print-err 'expr _LINE_ expr)
  (let [new-expr (hylo-env pre-eval eval defs expr)]
    (either (= new-expr expr)
            (eval-expr new-expr defs))))

(defn eval-exprs [exprs]
  (let [defs (-> (.value exprs)
                 (filter (partial instance? ast/definition-ast))
                 (reduce {} (fn [defs def]
                              (either (-> (.value-exprs def)
                                          (remove (partial instance? ast/NoCode))
                                          last
                                          (map (fn [val-ast]
                                                 (assoc defs (.sym def) val-ast))))
                                      defs))))
        expr (either (last (remove (.value exprs)
                                   (partial instance? ast/definition-ast)))
                      ast/no-comment)]
    (eval-expr expr defs)))

(main [args]
  (let [[_ file-name] args]
    (either (map (fio/file-in file-name)
                 (fn [file-in]
                   ;; if opened, parse and evaluate
                   (let [parse-result (parse-forms {'file-name file-name
                                                    'line-number 1}
                                                   (lazy-list file-in))]
                     (either (map (instance? rd/ParserError parse-result)
                                  (fn [r]
                                    (print-err (.msg r))
                                    (abort)))
                             (eval-exprs parse-result)))))

            ;; or tell everyone it couldn't be
            (print-err str "Could not find/open " file-name)))
  (print-err 'done))
