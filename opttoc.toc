
(add-ns c (git-dependency "https://github.com/Toccata-Lang/constraints.git"
                          "constraints.toc"
                          :sha "d1d3464"))
(add-ns ast (git-dependency "https://github.com/Toccata-Lang/ast.git"
                            "ast.toc"
                            :sha "dc7a1e0"))
(add-ns rdr (git-dependency "https://github.com/Toccata-Lang/reader.git"
                            "reader.toc"
                            :sha "83fd876"))
(add-ns rd (git-dependency "https://github.com/Toccata-Lang/recursive-descent.git"
                           "recursive-descent.toc"
                           :sha "d61aa1e"))
(add-ns grmr (git-dependency "https://github.com/Toccata-Lang/grammar.git"
                             "grammar.toc"
                             :sha "e8eba87"))
(add-ns fio (git-dependency "https://github.com/Toccata-Lang/file-io.git"
                            "file-io.toc"
                            :sha "36fa952"))
(add-ns se (git-dependency "https://github.com/Toccata-Lang/state-error.git"
                           "state-error.toc"
                           :sha "43bc6f4"))
(add-ns sys (git-dependency "https://github.com/Toccata-Lang/system.git"
                            "system.toc"
                            :sha "13097ff"))

(def se-nop (se/state-error '_))

(defn se-debug [& msg]
  (map se-nop
       (fn [_]
         (apply print-err msg))))

(def lflf "\n\n")
(def redex-count (agent 0))

(defn reduction [n line expr]
  ;; (print-err 'reduction _LINE_ line expr)
  (inc n))

(defprotocol Evaluation
  (redex [expr defs hist]
    expr)

  (apply-args [expr args defs hist]))

;; TODO: causes incRef error
;; (defn redex-f [expr prev-expr defs]
;;   (either (= expr prev-expr)
;;           (redex-f (redex expr defs identity [])
;;                    expr defs)))

(defn redex-f
  ([expr defs] (redex-f expr defs identity))
  ([expr defs hist]
   (let [new-expr (redex expr defs hist)]
     (either (= expr new-expr)
             (redex-f new-expr defs)))))

(defprotocol DotOut
  (grph-down [expr]
    (assert-result r (instance? se/StateError r))
    (se/state-error expr))

  (grph-up [expr]
    (assert-result r (instance? se/StateError r))))

(defn grph
  ([expr] (grph expr {}))
  ([expr env]
   ((hylo grph-down grph-up expr se/state-error) (list env))
   expr))

(deftype NoGraph [node-id]
  Container
  (map [x f embed]
    (embed x))

  DotOut
  (grph-up [_]
    (se/state-error node-id)))

(deftype Self []
  Stringable
  (string-list [_]
    (list "self")))

(extend-type String
  Container
  (map [s _ embed]
    (print-err 'blewto _LINE_ s)
    (abort))

  DotOut
  (grph-up [x]
    (se/state-error x)))

(def self (Self))

(defn get-val [k]
  (se/get-in-val [0 k]))

(defn dissoc-val [k]
  (se/update-state (fn [st]
                     (cons (either (map (first st) (fn [m]
                                                     (dissoc m k)))
                                   {})
                           (rest st)))))

(defn set-val [k v]
  (map (se/update-state (fn [st]
                          (cons (either (map (first st) (fn [m]
                                                          (assoc m k v)))
                                        {k v})
                                (rest st))))
       (fn [_]
         v)))

(defn set-all-vals [k v]
  (map (se/update-state (fn [st]
                          (map st (fn [m]
                                    (assoc m k v)))))
       (fn [_]
         v)))

(defn push-env []
  (se/update-state (fn [st]
                     (cons (either (first st)
                                   {})
                           st))))

(defn pop-env []
  (se/update-state rest))

(defn nip-env [vs]
  (se/update-state (fn [[fst snd & tail]]
                     (-> (reduce vs fst dissoc)
                         (comp (select-keys snd vs))
                         (cons tail)))))

(extend-type ast/param-sym
  Evaluation
  (apply-args [x args defs hist]
    (ast/call-expr (list* x args)))

  (redex [x defs hist]
    (either (map (get defs x)
                 (fn [v]
                   (redex v defs hist)))
            x))

  DotOut
  (grph-up [x]
    (comp (for [node-id (get-val x)]
            (cond (= 0 (.uses x))
                  ""

                  (str node-id ":n")))

          (map (set-all-vals x (gensym (str (.sym x))))
               (fn [param-id]
                 (println param-id "[label=\"" (str (.sym x)) (mod (address-of x) 1000) "\"]")
                 (str param-id ":n"))))))

(defn fresh [x]
  (reify
    Stringable
    (string-list [_]
      (list (str x)))

    Container
    (map [this f]
      this)

    (map [this f embed]
      (embed this))

    Eq
    (=* [x y]
      (identical x y))

    ast/AST
    (ast/vars [_] {})

    Evaluation
    (redex [this defs hist]
      this)

    DotOut
    (grph-up [_]
      (let [node-id (gensym (str x))]
        (println node-id (str "[label=\"" x "\"]"))
        (se/state-error (str node-id ":n"))))))

(def CoreType (any-of Integer Fn Vector List Maybe))

(extend-type Integer
  Container
  (map [n _] n)
  (map [n _ embed]
    (embed n))

  DotOut
  (grph-up [n]
    (let [node-id (gensym "int")]
      (println node-id (str "[label=\"" (str n) "\", ordering=out]"))
      (se/state-error (str node-id)))))

(extend-type ast/tagged-symbol
  Evaluation
  (apply-args [s args defs hist]
    (ast/call-expr (list* s args)))

  (redex [s defs hist]
    (either (get defs s)
            s))

  DotOut
  (grph-up [sym]
    (comp (get-val sym)
          (map se-nop (fn [_]
                        (let [node-id (gensym "sym")]
                          (println node-id (str "[label=\"" (str sym) "\"]"))
                          (str node-id)))))))

(extend-type ast/integer-ast
  Evaluation
  (redex [ast defs hist]
    (.int ast))

  DotOut
  (grph-up [n]
    (let [node-id (gensym "int")]
      (println node-id (str "[label=\"" (str (.int n)) "\", ordering=out]"))
      (se/state-error (str node-id)))))

(extend-type Fn
  Container
  (map [f _]
    f)

  (map [f _ embed]
    (embed f))

  Evaluation
  (apply-args [f args defs hist]
    ;; a Fn can only be applied to CoreType values, so the args
    ;; have to be completely reduced with no free variables
    ;; 'grph' is the exception as it can be applied to ast's as well.
    (let [new-args (map args (fn [arg]
                               (redex-f arg defs hist)))]
      (cond (or (identical f grph)
                (identical f print-err)
                (identical f fresh)
                (every new-args (partial instance? CoreType)))
            (let [r (apply f new-args)]
              ;; (send redex-count reduction _LINE_ new-call)
              ;; (println "subgraph" (gensym "cluster") "{")
              ;; (println (str "graph [color=none, label=\" "
              ;;               (to-str (list* "(" (fn-name f) " " (interpose new-args " ")))
              ;;               ") " _LINE_ "\"]"))
              ;; (grph (hist r) defs)
              ;; (println "}")
              r)

            (ast/call-expr (list* f args)))))

  DotOut
  (grph-up [expr]
    (let [node-id (gensym "fn")
          x-end (str node-id ":sw")
          y-end (str node-id ":se")]
      (println node-id (str "[label=\"" (fn-name expr) "\", ordering=out]"))
      (se/state-error (str node-id ":n")))))

(deftype GlobalFn [var]
  Stringable
  (string-list [_]
    (list (str "<" var ">")))

  Container
  (map [x f]
    x)

  (map [x f embed]
    (embed x))

  ast/AST
  (ast/vars [_] {})

  Evaluation
  (apply-args [ast args defs hist]
    (either (map (get defs var)
                 (fn [f]
                   (apply-args f args defs hist)))
            (ast/call-expr (list* ast args))))

  DotOut
  (grph-up [g]
    (let [node-id (gensym "gbl")]
      (println node-id (str "[label=\"" g "\"]"))
      (se/state-error (str node-id)))))

(defn church [n]
  (let [fn-sym (ast/tag (symbol (str n)))
        x (ast/param-sym (ast/tag (gensym "x")) n)
        y (ast/param-sym (ast/tag (gensym "y")) 1)]
    (ast/fn-ast fn-sym
                [(ast/fn-arity-ast
                  fn-sym
                  (ast/params [x])
                  ast/no-comment
                  [(ast/fn-ast (ast/tag (symbol (str "inner-" n)))
                               [(cond (= 0 n)
                                      (ast/fn-arity-ast c/no-symbol
                                                        (ast/params [y])
                                                        ast/no-comment
                                                        [y]
                                                        {})

                                      (= 1 n)
                                      (ast/fn-arity-ast c/no-symbol
                                                        (ast/params [y])
                                                        ast/no-comment
                                                        [(ast/call-expr [x y])]
                                                        {})

                                      (ast/fn-arity-ast c/no-symbol
                                                        (ast/params [y])
                                                        ast/no-comment
                                                        [
                                                         (reduce (range n) y
                                                                 (fn [expr _]
                                                                   (ast/call-expr [x expr])))

                                                         ;; (ast/binding-ast
                                                         ;;  x param-x
                                                         ;;  [(reduce (range n) y
                                                         ;;           (fn [expr _]
                                                         ;;             (ast/call-expr [x expr])))])
                                                         ]
                                                        {}))])]
                  {})])))

(defn rscheme [co-algebra algebra x embed]
  (flat-map (co-algebra x)
            (fn [new-x]
              (cond (instance? RecurseFinal new-x)
                    (embed (.x new-x))

                    (flat-map (map (.x new-x) (fn [y]
                                                (rscheme co-algebra algebra y embed))
                                   embed)
                              (fn [new-x]
                                (algebra new-x x)))))))

(extend-type ast/fn-arity-ast
  Evaluation
  (redex [arity defs hist]
    (.body arity (map (.body arity) (fn [expr]
                                      (redex expr defs hist)))))

  (apply-args [arity args defs hist]
    (let [params (.params arity)]
      ;; fully reduce all but the last expression for any side effects
      ;; TODO: but what if they have free-vars
      ;; (-> (.body expr)
      ;;     butlast
      ;;     (map (fn [expr]
      ;;            (lazy expr defs))))
      (either (map (last (.body arity))
                   (fn [body]
                     (send redex-count reduction _LINE_ [arity args])
                     (let [
                           ;; keep track of expressoins that have been changed by subst
                           ;; [new-bod] ((rscheme (fn [x]
                           ;;                       (comp (map (se/get-val (address-of x))
                           ;;                                  (fn [new-x]
                           ;;                                    (print-err 'found _LINE_
                           ;;                                               (mod (address-of x) 1000) x
                           ;;                                               lflf new-x)
                           ;;                                    (RecurseFinal new-x)))
                           ;;                             (se/state-error (RecurseWith x))))
                           ;;                     (fn [x old-x]
                           ;;                       (flat-map (se-debug 'setting _LINE_
                           ;;                                           (mod (address-of old-x) 1000))
                           ;;                                 (fn [_]
                           ;;                                   (either (map (get subs x)
                           ;;                                                se/state-error)
                           ;;                                           (se/set-val (address-of old-x)
                           ;;                                                       x)))))
                           ;;                     body
                           ;;                     se/state-error)
                           ;;            {})

                           ;; new-bod (redex body
                           ;;                (reduce (zip-lists (.fixed params) args)
                           ;;                        defs
                           ;;                        (fn [subs [param arg]]
                           ;;                          (cond (< 0 (.uses param))
                           ;;                                (assoc subs param arg)

                           ;;                                subs)))
                           ;;                hist)

                           subs (reduce (zip-lists (.fixed params) args)
                                        {}
                                        (fn [subs [param arg]]
                                          (cond (< 0 (.uses param))
                                                (assoc subs param arg)

                                                subs)))

                           new-bod (cata (fn [x]
                                           (either (get subs x)
                                                   x))
                                            body)

                           ;; _ (do
                           ;;     (println "subgraph" (gensym "cluster") "{")
                           ;;     (println (str "graph [color=none, label=\"applied "
                           ;;                (.fn-sym arity) " " (mod (address-of arity) 1000) "\"]"))
                           ;;     (grph (hist new-bod))
                           ;;     (println "}"))

                           new-bod (redex new-bod defs hist)
                           ]
                       ;; (println "subgraph" (gensym "cluster") "{")
                       ;; (println (str "graph [color=none, label=\"apply-arity "
                       ;;               (graph-title (.call-target app-expr))
                       ;;               " " _LINE_ "\"]"))
                       ;; (grph (hist new-bod) defs)
                       ;; (println "}")
                       new-bod)))
              (ast/call-expr (list* arity args)))))


  DotOut
  (grph-down [f]
    (comp (for [node-id (get-val (address-of f))]
            (NoGraph (str node-id ":n")))
          (for [node-id (set-all-vals (address-of f) (gensym "fn"))
                _ (push-env)
                _ (set-val self f)
                _ (se/traverse (ast/all-syms (.params f))
                               (fn [x]
                                 (assert (instance? ast/param-sym x))

                                 (for [param-id (comp (get-val x)
                                                      (set-all-vals x (gensym (str (.sym x)))))]
                                   (do
                                     (cond (= 0 (.uses x))
                                           (do
                                             (println param-id "[label=\"" (str (.sym x)) "\""
                                                      ;; ", xlabel=\"" x "\""
                                                      "]")
                                             (println (str node-id ":sw") "--" (str param-id ":ne")))

                                           (do
                                             (println param-id "[label=\"\","
                                                      " height=0.3, width=0.3, fixedsize=true,"
                                                      " shape=triangle, orientation=180]")
                                             (println (str node-id ":sw") "--" (str param-id ":sw"))))
                                     x))))]
            (do
              (println node-id (str "[label=\"λ " (cond (= c/no-symbol (.fn-sym f))
                                                        (mod (address-of f) 1000)
                                                        (str (.fn-sym f) " "
                                                             (mod (address-of f) 1000)))
                                    "\"]"))
              f))))

  (grph-up [f]
    (for [old-f (get-val self)
          node-id (get-val (address-of old-f))
          :let [body (either (last (.body f))
                                  ast/no-comment)]
          _ (pop-env)]
      (do
        (println (str node-id ":s") "--" body)
        (str node-id ":n")))))

(defn graph-title [tgt]
  (either (or (map (instance? GlobalFn tgt)
                   (comp str .var))
              (map (instance? ast/fn-ast tgt)
                   (fn [f]
                     (let [fn-sym (.fn-sym f)]
                       (cond (instance? ast/tagged-symbol fn-sym)
                             (str fn-sym)
                             "")))))
          (type-name tgt)))

(extend-type ast/fn-ast
  Evaluation
  ;; (redex [f defs hist]
  ;;   (.arities f (map (.arities f)
  ;;                    (fn [arity]
  ;;                      (redex arity defs hist)))))

  (apply-args [tgt args defs hist]
    (either (some (.arities tgt)
                  (fn [arity]
                    ;; TODO: variadic will be handled here
                    (and (= (count (.params arity)) (count args))
                         (maybe (apply-args arity args defs hist)))))
            (do
              (print-err 'no-arity-found (ast/location tgt) (count args)
                         lflf tgt)
              (ast/call-expr (list* tgt args)))))

  DotOut
  (grph-up [expr]
    (se/state-error (either (first (.arities expr))
                            ""))))

;; (extend-type ast/NestedCond
;;   Evaluation
;;   (redex [ast defs hist]
;;     (let [test (redex (.test ast) defs (comp hist (partial .test ast)))]
;;       (cond (instance? Maybe test)
;;             (cond test
;;                   (redex (.clause ast) defs (comp hist (partial .clause ast)))

;;                   (redex (.cont ast) defs (comp hist (partial .cont ast))))
;;             (.test ast test)))))

(extend-type ast/call-ast
  Evaluation
  (apply-args [expr args defs hist]
    (ast/call-expr (list* expr args)))

  (redex [expr defs hist]
    (let [tgt (.call-target expr)]
      (either (map (delivered (.reduced expr))
                   (fn [reduced]
                     (let [r (redex reduced defs hist)]
                       (print-err 'cached _LINE_ (mod (address-of expr) 1000) expr
                                  lflf r)
                       r)))
              (let [
                    ;; _ (do
                    ;;     (println "subgraph" (gensym "cluster") "{")
                    ;;     (println (str "graph [color=none, label=\"Application "
                    ;;                   (mod (address-of expr) 1000) "\"]"))
                    ;;     (grph (hist expr))
                    ;;     (println "}"))
                    new-tgt (redex tgt defs
                                   (comp hist (partial .call-target expr)))
                    reduced (apply-args new-tgt
                                        (map (.args expr)
                                             (fn [arg]
                                               (cond (identical arg tgt)
                                                     new-tgt
                                                     arg)))
                                        defs hist)]
                (and (or (instance? ast/fn-ast tgt)
                         (instance? GlobalFn tgt))
                     (do
                       (print-err 'delivering _LINE_ (mod (address-of expr) 1000) expr
                                  lflf (mod (address-of reduced) 1000) reduced
                                  lflf (= expr reduced))
                       (maybe (deliver (.reduced expr) reduced))))
                reduced))))

  DotOut
  (grph-down [expr]
    (either (map (delivered (.reduced expr)) grph-down)
            (comp (for [node-id (get-val (address-of expr))]
                    (NoGraph (str node-id ":n")))
                  (for [_ se-nop
                        :let [node-id (gensym "app")]
                        _ (set-all-vals (address-of expr) node-id)
                        _ (push-env)
                        _ (set-val self node-id)]
                    (do
                      (println node-id (str "[label=\"@" " " (mod (address-of expr) 1000)
                                            "\", ordering=out]"))
                      expr)))))

  (grph-up [expr]
    (for [node-id (get-val self)
          :let [tgt (.call-target expr)
                tgt-end (str node-id ":sw")
                arg-end (str node-id ":se")]
          _ (pop-env)]
      (do
        (println tgt-end "--" tgt)
        (map (.args expr) (fn [arg]
                            (println arg-end "--" arg)))
        (str node-id ":n")))))


(def core-env {(ast/tag 'church) church
               (ast/tag 'fresh) fresh
               (ast/tag 'print-err) print-err
               (ast/tag 'inc) inc
               (ast/tag 'dec) dec
               (ast/tag '+) +
               (ast/tag '-) -
               (ast/tag '*) *
               (ast/tag 'range) range
               (ast/tag 'cons) cons
               (ast/tag 'first) first
               (ast/tag 'rest) rest
               (ast/tag 'empty-list) empty-list
               (ast/tag 'list) list
               (ast/tag 'empty?) empty?
               (ast/tag 'nil) nothing
               (ast/tag '=) =
               (ast/tag 'bit-shift-right) bit-shift-right
               (ast/tag 'bit-and) bit-and
               (ast/tag 'grph) grph})

(defn eval-exprs [exprs]
  (let [defs (-> exprs
                 (filter (partial instance? ast/definition-ast))
                 (reduce core-env
                         (fn [defs def]
                           (either (-> (.value-exprs def)
                                       (remove (partial instance? ast/NoCode))
                                       last
                                       (map (fn [val-ast]
                                              (assoc defs (.sym def) val-ast))))
                                   defs))))
        global-fns (reduce (vec defs) {} (fn [m [s v]]
                                           (cond (or (instance? Fn v)
                                                     (instance? ast/fn-ast v))
                                                 (assoc m s (GlobalFn s))

                                                 m)))
        defs (map-vals defs (fn [def]
                              (either (instance? CoreType def)
                                      (cata (fn [s]
                                              (either (and (instance? ast/tagged-symbol s)
                                                           (get global-fns s))
                                                      s))
                                            def))))
        exprs (-> exprs
                  (remove (partial instance? ast/definition-ast))
                  (map (fn [expr]
                         (let [expr (cata (fn [s]
                                            (either (and (instance? ast/tagged-symbol s)
                                                         (get global-fns s))
                                                    s))
                                          expr)
                               fvs (-> (ast/free-syms expr)
                                       (dissoc (ast/tag (symbol "$1"))))]
                           (cata (fn [s]
                                   (either (and (instance? ast/tagged-symbol s)
                                                (get global-fns s)
                                                (maybe (fresh s)))
                                           s))
                                 expr)))))]
    (map exprs (fn [expr]
                 (send redex-count (fn [_] 0))
                 (println "subgraph" (gensym "cluster") "{")
                 (println (str "graph [color=none, label=\"initial " _LINE_ "\"]"))
                 (grph expr defs)
                 (println "}")

                 (let [p (promise)
                       start-time (sys/clock_gettime)]
                   (let [final (redex expr defs identity)
                         elapsed (sys/time-delta start-time (sys/clock_gettime))
                         _ (do
                             (println "subgraph" (gensym "cluster") "{")
                             (println (str "graph [color=none, label=\"final " _LINE_ "\"]"))
                             (grph final)
                             (println "}"))
                         _ (send redex-count (partial deliver p))
                         redexes (extract p)]
                     (either (map (get defs (ast/tag (symbol "$1")))
                                  (fn [test-cnt]
                                    (print-err 'final _LINE_ final
                                               "\n" (str elapsed
                                                         ", redexes: " redexes
                                                         ", test-cnt: " test-cnt))
                                    ;; (println (str "comment=\"stats " test-cnt ", "
                                    ;;               elapsed ", " redexes "\""))
                                    ;; (println (str "stats " test-cnt ", "
                                    ;;               elapsed ", " redexes))
                                    ))
                             '_)))))))

(def parse-forms
  (rd/parser
   (grmr/none-or-more rdr/top-level)))

(main [args]
  (println "graph sharing {")
  (println "node [shape=none, height=0, width=0]"
           "\nedge [arrowhead=none]")
  (let [[_ file-name & cnt-str] args
        test-cnt (either (map (first cnt-str) str-to-int)
                         3)]
    (either (map (fio/file-in file-name)
                 (fn [file-in]
                   ;; if opened, parse and evaluate
                   (let [parse-result (parse-forms {'file-name file-name
                                                    'line-number 1}
                                                   (lazy-list file-in))]
                     (either (map (instance? rd/ParserError parse-result)
                                  (fn [r]
                                    (print-err (.msg r))
                                    (abort)))
                             (let [final (eval-exprs (comp [(ast/definition (ast/tag (symbol "$1"))
                                                              (list test-cnt))]
                                                           (.value parse-result)))
                                   ;; elapsed (sys/time-delta start-time (sys/clock_gettime))
                                   ;; _ (send redex-count (partial deliver p))
                                   ;; redexes (extract p)
                                   ]
                               ;; (print-err 'final _LINE_ final
                               ;;            "\n" (str test-cnt ", " elapsed ", " redexes))
                               ;; (println 'stats (str test-cnt ", " elapsed ", " redexes))
                               (print-err 'done)
                               )))))

            ;; or tell everyone it couldn't be
            (print-err str "Could not find/open " file-name))
    (println  "}\n")
    )
  (print-err 'done))
