
(add-ns se (git-dependency "https://github.com/Toccata-Lang/state-error.git"
                           "state-error.toc"
                           :sha "43bc6f4"))
(add-ns c (git-dependency "https://github.com/Toccata-Lang/constraints.git"
                          "constraints.toc"
                          :sha "d1d3464"))
(add-ns ast (git-dependency "https://github.com/Toccata-Lang/ast.git"
                            "ast.toc"
                            :sha "cb3f470"))
(add-ns rdr (git-dependency "https://github.com/Toccata-Lang/reader.git"
                            "reader.toc"
                            :sha "9750c7e"))
(add-ns rd (git-dependency "https://github.com/Toccata-Lang/recursive-descent.git"
                           "recursive-descent.toc"
                           :sha "d61aa1e"))
(add-ns grmr (git-dependency "https://github.com/Toccata-Lang/grammar.git"
                             "grammar.toc"
                             :sha "e8eba87"))
(add-ns fio (git-dependency "https://github.com/Toccata-Lang/file-io.git"
                            "file-io.toc"
                            :sha "36fa952"))
(add-ns se (git-dependency "https://github.com/Toccata-Lang/state-error.git"
                           "state-error.toc"
                           :sha "43bc6f4"))

(defn hylo-env [descend ascend env x]
  (let [[y new-env] (descend x env)]
    (ascend (map y (fn [inner-x]
                     (hylo-env descend ascend new-env inner-x)))
            new-env)))

(defprotocol Evaluation
  (pre-eval [ast env]
    [ast env])

  (eval [ast env]
    ;; (print-err 'ast _LINE_ ast
    ;;            "\n\n" 'env env)
    )

  (eval-bind [val binding env]
    (print-err 'binding-val _LINE_ (type-name val) val)
    (abort))

  (eval-app [f call env]
    (.call-target call f)))

(deftype Self []
  Stringable
  (string-list [_]
    (list "self")))

(def self (Self))

(defprotocol DotOut
  (grph-down [expr]
    (assert-result r (instance? se/StateError r))
    (se/state-error expr))

  (grph-up [expr]
    (assert-result r (instance? se/StateError r))))

(defn grph
  ([expr] (grph expr {}))
  ([expr env]
   ;; _ (print-err 'expr _LINE_ expr
   ;;              "\n\n" 'env env)
   ((hylo grph-down grph-up expr se/state-error) (list env))))

(defn get-val [k]
  (se/get-in-val [0 k]))

(defn dissoc-val [k]
  (se/update-state (fn [st]
                     (cons (either (map (first st) (fn [m]
                                                     (dissoc m k)))
                                   {})
                           (rest st)))))

(defn set-val [k v]
  (map (se/update-state (fn [st]
                          (cons (either (map (first st) (fn [m]
                                                          (assoc m k v)))
                                        {k v})
                                (rest st))))
       (fn [_]
         v)))

(defn fresh-vars [vs]
  (fn [expr]
    (reify
      Container
      (map [_ f embed]
        (f expr))

      DotOut
      (grph-down [this]
        (map (se/traverse vs
                          (fn [s]
                            (let [node-id (gensym (str s))]
                              (println node-id (str "[label=\"" s "\"]"))
                              (set-val s node-id))))
             (fn [_]
               this))))))

(defn push-env []
  (se/update-state (fn [st]
                     (cons (either (first st)
                                   {})
                           st))))

(defn pop-env []
  (se/update-state rest))

(defn nip-env [vs]
  (se/update-state (fn [[head snd & tail]]
                     (-> (reduce vs head dissoc)
                         (comp (select-keys snd vs))
                         (cons tail)))))

(def CoreType (any-of Integer Fn))

(extend-type Fn
  Container
  (map [f _] f)
  (map [f _ embed] (embed f))

  Evaluation
  (eval-app [f app-expr env]
    (let [new-args (map (.args app-expr) (fn [arg]
                                           (hylo-env pre-eval eval env arg)))]
      (cond (every new-args (partial instance? CoreType))
            (apply f new-args)

            (ast/call-ast f new-args))))

  (eval-bind [f binding env]
    (either (last (ast/simple-replace (.cont binding) {(.id binding) f}))
            (do
              (print-err 'compiler-error _FILE_ _LINE_)
              (abort))))

  (eval [f _]
    f)

  ;; DotOut
  ;; (grph-up [expr]
  ;;   (let [node-id (gensym "fn")
  ;;         x-end (str node-id ":sw")
  ;;         y-end (str node-id ":se")]
  ;;     (println node-id (str "[label=\"" (fn-name expr) "\", ordering=out]"))
  ;;     (for [_ (cond (instance? String x)
  ;;                   (se/state-error (println x-end "--" x))

  ;;                   (comp (for [endpoint (get-val x)]
  ;;                           (println x-end "--" endpoint))
  ;;                         (set-val x x-end)))
  ;;           _ (cond (instance? String y)
  ;;                   (se/state-error (println y-end "--" y))

  ;;                   (comp (for [endpoint (get-val y)]
  ;;                           (println y-end "--" endpoint))
  ;;                         (set-val y y-end)))]
  ;;       (str node-id ":n"))))
  )

(extend-type Integer
  Container
  (map [n _] n)
  (map [n _ embed]
    (embed n))

  Evaluation
  (eval [n _]
    n))

(extend-type Vector
  Evaluation
  (eval [ast env]
    ast)

  DotOut
  (grph-up [v]
    (se/state-error v)))

(extend-type c/NoSymbol
  Evaluation
  (eval [x _]
    x))

(deftype Skip [expr]
  Stringable
  (string-list [_]
    (list "(Skip " (str expr) ")"))

  Container
  (map [e f]
    expr)

  (map [e f embed]
    (embed expr)))

(defn church [n]
  (let [fn-sym (ast/tag (symbol (str n)))
        param-x (ast/tag (gensym "px"))
        x (ast/tag (gensym "x"))
        y (ast/tag (gensym "y"))
        ;; dups (-> (range (.int n))
        ;;          (map (fn [n]
        ;;                 (ast/tag (symbol (str 'a (inc n))) loc)))
        ;;          vec)
        ]
    (ast/fn-ast fn-sym
                [(ast/fn-arity-ast
                  fn-sym
                  (ast/params [param-x])
                  ast/no-comment
                  [(ast/fn-ast c/no-symbol
                               [(ast/fn-arity-ast
                                 c/no-symbol
                                 (ast/params [y])
                                 ast/no-comment
                                 [(ast/binding-ast x param-x
                                                    [(reduce (range n) y
                                                             (fn [expr _]
                                                               (ast/call-ast x [expr])))])]
                                 {param-x 1})])]
                  {})])))

(extend-type ast/integer-ast
  Evaluation
  (eval [n env]
    (.int n))

  DotOut
  (grph-up [n]
    (let [node-id (gensym "int")]
      (println node-id (str "[label=\"" (str (.int n)) "\", ordering=out]"))
      (se/state-error (str node-id)))))

(extend-type ast/binding-ast
  Evaluation
  (pre-eval [ast env]
    [(.cont ast (either (instance? ast/binding-ast (.cont ast))
                        (Skip (.cont ast))))
     (dissoc-all env (ast/all-syms (.id ast)))])

  (eval-bind [expr binding env]
    (.expr binding expr))

  (eval [ast env]
    ;; (print-err 'eval-binding _LINE_ ast)
    (eval-bind (.expr ast) ast env))

  DotOut
  (grph-down [expr]
    (let [node-id (gensym "bnd")
          endpoint (str node-id ":n")]
      (println node-id (str "[label=\"\",")
               "height=0.4, width=0.4, fixedsize=true, shape=triangle, orientation=180]")
      (for [_ (push-env)
            _ (set-val self node-id)
            _ (se/traverse (ast/all-syms (.id expr))
                           (fn [id]
                             (set-val id endpoint)))]
        expr)))

  (grph-up [expr]
    (for [node-id (get-val self)
          :let [arg-end (str node-id ":sw")
                new-ids (reduce (ast/all-syms (.id expr)) [self]
                                (fn [new-ids id]
                                  (cond (instance? ast/tagged-symbol id)
                                        (conj new-ids id)

                                        (comp new-ids id))))]
          _ (nip-env new-ids)
          _ (cond (instance? Sequence (.expr expr))
                  ;; (se/traverse (.expr expr)
                  ;;              (fn [v]
                  ;;                (cond (instance? String v)
                  ;;                      (se/state-error (println arg-end "--" v))

                  ;;                      (comp (map (get-val v)
                  ;;                                 (fn [endp]
                  ;;                                   (println arg-end "--" endp)))
                  ;;                            (set-val v arg-end)))))
                  (do
                    (print-err 'graphing-error _LINE_ expr)
                    (abort))

                  (instance? String (.expr expr))
                  (se/state-error (println arg-end "--" (.expr expr)))

                  (comp (map (get-val (.expr expr))
                             (fn [endp]
                               (println arg-end "--" endp)))
                        (set-val (.expr expr) arg-end)))]
      (either (last (.cont expr))
              ""))))

(extend-type ast/fn-arity-ast
  Evaluation
  (pre-eval [ast env]
    [ast (dissoc-all env (ast/all-syms (.params ast)))])

  (eval [ast env]
    ast)

  DotOut
  (grph-down [f]
    (let [node-id (gensym "fn")]
      (println node-id (str "[label=\"Î»\"]"))
      (for [_ (push-env)
            _ (set-val self node-id)
            _ (se/traverse (ast/all-syms (.params f))
                           (fn [v]
                             (set-val v (str node-id ":sw"))))]
        f)))

  (grph-up [f]
    (for [node-id (get-val self)
          :let [body (either (last (.body f))
                             (ast/tag '_))]
          _ (cond (instance? ast/tagged-symbol body)
                  (comp (for [body-node (get-val body)]
                          (println (str node-id ":s") "--" body-node))

                        ;; (set-val body (str node-id ":s"))
                        (se/state-error '_))
                  (se/state-error (println (str node-id ":s") "--" body)))
          _ (pop-env)]
      (str node-id ":n"))))

(extend-type ast/fn-ast
  Evaluation
  (eval [ast _]
    ast)

  (eval-bind [f binding env]
    ;; todo: temporary hack. expand later
    ;; what if there are free-vars in some, all or none of the arities
    (either (last (ast/simple-replace (.cont binding) {(.id binding) f}))
            (do
              (print-err 'compiler-error _FILE_ _LINE_)
              (abort))))

  (eval-app [tgt call env]
    (let [args (.args call)
          arg-count (count args)]
      (either (for [arity (or (some (.arities tgt)
                                    (fn [arity]
                                      (and (= (count (.params arity)) arg-count)
                                           (maybe arity))))
                              (do
                                (print-err 'no-arity-found (ast/location call) arg-count
                                           "\n\n" tgt)
                                nothing))]
                (let [new-env (-> arity
                                  .params
                                  .fixed
                                  (zip-lists args)
                                  (reduce {} (fn [m [k v]]
                                               (assoc m k v))))
                      new-body (ast/simple-replace (.body arity) new-env)
                      r (either (last (hylo-env pre-eval eval env new-body))
                                call)]
                  ;; (print-err 'expr _LINE_ (.call-target call)
                  ;;            "\n\n" 'args (.args call)
                  ;;            "\n\n" 'env (keys env)
                  ;;            ;; "\n\n" 'new-env new-env
                  ;;            "\n\n" 'result r)
                  ;; (abort)
                  r))
              (.call-target call tgt))))

  DotOut
  (grph-up [expr]
    (se/state-error (either (first (.arities expr))
                            ""))))

(extend-type ast/call-ast
  Evaluation
  (pre-eval [ast env]
    [(.args ast (map (.args ast) Skip))
     env])

  (eval-bind [ast binding env]
    (.expr binding ast))

  (eval [expr env]
    (eval-app (.call-target expr) expr env))

  DotOut
  (grph-down [expr]
    (let [node-id (gensym "app")]
      (println node-id (str "[label=\"@\", ordering=out]"))
      (for [_ (push-env)
            _ (set-val self node-id)]
        expr)))

  (grph-up [expr]
    (for [node-id (get-val self)
          :let [tgt (.call-target expr)
                tgt-end (str node-id ":sw")
                arg-end (str node-id ":se")]
          _ (pop-env)
          _ (cond (instance? String tgt)
                  (se/state-error (println tgt-end "--" tgt))

                  (comp (for [endpoint (get-val tgt)]
                          (println tgt-end "--" endpoint))
                        (set-val tgt tgt-end)))
          _ (se/traverse (.args expr) (fn [arg]
                                       (cond (instance? String arg)
                                             (se/state-error (println arg-end "--" arg))

                                             (comp (for [endpoint (get-val arg)]
                                                     (println arg-end "--" endpoint))
                                                   (set-val arg arg-end)))))]
      (str node-id ":n"))))


(extend-type ast/tagged-symbol
  Evaluation
  (eval-bind [s binding env]
    (.expr binding s))

  (eval [s env]
    (either (get env s)
            s))

  DotOut
  (grph-up [s]
    (se/state-error s)))

(def parse-forms
  (rd/parser
   (grmr/none-or-more rdr/top-level)))

(defn eval-expr [expr defs]
  ;; (print-err 'expr _LINE_ expr)
  (let [new-expr (hylo-env pre-eval eval defs expr)]
    (either (= new-expr expr)
            (eval-expr new-expr defs))))

(def core-env {(ast/tag 'church) church
               (ast/tag 'inc) inc
               (ast/tag 'grph) grph})

(defn eval-exprs [exprs]
  (let [defs (-> (.value exprs)
                 (filter (partial instance? ast/definition-ast))
                 (reduce core-env
                         (fn [defs def]
                           (either (-> (.value-exprs def)
                                       (remove (partial instance? ast/NoCode))
                                       last
                                       (map (fn [val-ast]
                                              (let [val (eval-expr val-ast defs)]
                                                (assoc defs (.sym def)
                                                       val)))))
                                   defs))))
        expr (either (last (remove (.value exprs)
                                   (partial instance? ast/definition-ast)))
                      ast/no-comment)]
    (grph (eval-expr expr defs))))

(main [args]
  (println "graph sharing {")
  (println "node [shape=none, height=0, width=0]"
           "\nedge [arrowhead=none]")
  (let [[_ file-name] args]
    (either (map (fio/file-in file-name)
                 (fn [file-in]
                   ;; if opened, parse and evaluate
                   (let [parse-result (parse-forms {'file-name file-name
                                                    'line-number 1}
                                                   (lazy-list file-in))]
                     (either (map (instance? rd/ParserError parse-result)
                                  (fn [r]
                                    (print-err (.msg r))
                                    (abort)))
                             (eval-exprs parse-result)))))

            ;; or tell everyone it couldn't be
            (print-err str "Could not find/open " file-name)))
  (println  "}\n")
  (print-err 'done))
