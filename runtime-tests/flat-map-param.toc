
(deftype and-ast [clauses]
  (assert (instance? Vector clauses))

  Stringable
  (string-list [_]
    (comp (list "<AndAST ")
          (flat-map clauses string-list)
          (list ">"))))

(defn traverse [asts f]
  (reduce (reverse asts) (maybe empty-list)
            (fn [l ast]
              (flat-map (f ast)
                        (fn [emitted]
                          (map l (fn [x]
                                   (cons emitted x))))))))

;; TODO: error message has '#field' in it

(main [_]
      (let [aa (and-ast ['a 'b])]
        (println (map (traverse (either (maybe ['a 'b])
                                        '(a b)) maybe)
                      (fn [nc]
                        (.clauses aa (either (maybe nc)
                                             []))))))
      (println 'done))
