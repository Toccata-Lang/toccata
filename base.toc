
(add-ns c (git-dependency "https://github.com/Toccata-Lang/constraints.git"
                          "constraints.toc"
                          :sha "3eb629e"))
(add-ns ast (git-dependency "https://github.com/Toccata-Lang/ast.git"
                            "ast.toc"
                            :sha "7f33668"))

(extend-type String
  Container
  (map [x f] x)
  (map [x f embed] (embed x)))

(extend-type Symbol
  Container
  (map [x f]
    x)

  (map [x f embed]
    (embed x)))

(extend-type Integer
  Container
  ;; TODO: remove these
  (map [x f]
    x)

  (map [x f embed]
    (embed x)))

(extend-type HashMap
  Container
  (map [x f]
    x)

  (map [x f embed]
    (embed x)))

(deftype TypeExtension [type-constraint impls]
  Stringable
  (string-list [_]
    (list "(" (str type-constraint)
          (str impls) ")"))

  ;; TODO: type-constraint can be type-num
  Container
  (map [x f]
    (.impls x (map-vals impls (fn [impl-fns]
                                (map-vals impl-fns (fn [arities]
                                                     (map arities f)))))))

  (map [x f embed]
    (map (contextual-map-vals impls (fn [impl-fns]
                                      (contextual-map-vals impl-fns
                                                           (fn [arities]
                                                             (map arities f embed))
                                                           embed))
                              embed)
         (partial .impls x))))

(deftype TailHashMap [m]
  Stringable
  (string-list [_]
    (list (str m)))

  Container
  (map [x f]
    x)

  (map [x f embed]
    (embed x)))

(deftype TailCall [ast params]
  (assert (instance? Vector params))

  Stringable
  (string-list [expr]
    (comp (list "<TailCall ")
          (string-list ast)
          (cons "\n" (string-list params))
          (list ">")))

  Container
  (map [x f]
    (TailCall (f ast) params))

  (map [x f embed]
    (for [new-ast (f ast)]
      (TailCall new-ast params)))

  ast/FileLineInfo
  (ast/file-name [_]
    (ast/file-name ast))

  (ast/line-number [_]
    (ast/line-number ast)))

(deftype TailEither [clause alt]
  Stringable
  (string-list [expr]
    (list "(TailEither " (str clause) "\n" (str alt) ")"))

  Container
  (map [x f]
    (TailEither (f clause) (f alt)))

  (map [x f embed]
    (for [new-clause (f clause)
          new-alt (f alt)]
      (TailEither new-clause new-alt)))

  ast/FileLineInfo
  (ast/file-name [_]
    (ast/file-name clause))
  (ast/line-number [_]
    (ast/line-number clause)))

(deftype TailAnd [clauses]
  (assert (instance? Vector clauses))

  Stringable
  (string-list [expr]
    (comp (list "<TailAnd ")
          (flat-map (vec clauses) string-list)
          (list ">")))

  Container
  (map [x f]
    (TailAnd (map clauses f)))

  (map [x f embed]
    (map (map clauses f embed) TailAnd))

  ast/FileLineInfo
  (ast/file-name [_]
    (ast/file-name clauses))
  (ast/line-number [_]
    (ast/line-number clauses)))

(deftype TailOr [clauses]
  (assert (instance? Vector clauses))

  Stringable
  (string-list [expr]
    (comp (list "<TailOr\n")
          (flat-map (interpose clauses "\n") string-list)
          (list ">")))

  Container
  (map [x f]
    (TailOr (map clauses f)))

  (map [x f embed]
    (map (map clauses f embed) TailOr))

  ast/FileLineInfo
  (ast/file-name [_]
    (ast/file-name clauses))
  (ast/line-number [_]
    (ast/line-number clauses)))

(deftype TailExpr [ast]
  Stringable
  (string-list [_]
    (list (str ast)))

  Container
  (map [x f]
    (TailExpr (f ast)))

  (map [x f embed]
    (map (f ast)
         (fn [new-ast]
           (TailExpr new-ast)))))

(deftype TailCond [conditionals default]
  Stringable
  (string-list [_]
    (list "(TailCond " (str conditionals) " " (str default) ")"))

  Container
  (map [x f]
    (TailCond (map conditionals f) (f default)))

  (map [x f embed]
    (for [new-conds (map conditionals f embed)
          new-default (f default)]
      (TailCond new-conds new-default)))

  ast/FileLineInfo
  (ast/file-name [_]
    (ast/file-name conditionals))

  (ast/line-number [_]
    (ast/line-number conditionals)))

(deftype CondValCond [clause]
  Stringable
  (string-list [_]
    (list "(CondValCond " (str clause) ")"))

  Container
  (map [_ f]
    (CondValCond (f clause)))

  (map [_ f embed]
    (map (f clause) CondValCond))

  ast/FileLoc
  (ast/location [_]
    (ast/location clause)))

(deftype CondValVal [clause]
  Stringable
  (string-list [_]
    (list "(CondValVal " (str clause) ")"))

  Container
  (map [_ f]
    (CondValVal (f clause)))

  (map [_ f embed]
    (map (f clause) CondValVal))

  ast/FileLoc
  (ast/location [_]
    (ast/location clause)))

(deftype ConstrainedAST [ast constraint]
  Stringable
  (string-list [_]
    (list "(ConstrainedAST " (either (and (instance? ast/tagged-symbol ast)
                                          (maybe (str "'" ast " ")))
                                     (str ast "\n"))
          (str constraint) ")"))

  ast/FileLineInfo
  (ast/file-name [_]
    (ast/file-name ast))

  (ast/line-number [_]
    (ast/line-number ast))

  ast/FileLoc
  (ast/location [_]
    (ast/location ast))

  Container
  (map [x f]
    (ConstrainedAST (f ast) (f constraint)))

  (map [x f embed]
    (for [new-ast (f (.ast x))
          new-constraint (f (.constraint x))]
      (ConstrainedAST new-ast new-constraint))))

(defn remove-asts [c]
  (cata (fn [x]
          (either (map (instance? ConstrainedAST x) .constraint)
                  x))
        c))

(defn remove-constraints [c]
  (cata (fn [x]
          (either (map (instance? ConstrainedAST x) .ast)
                  x))
        c))

(deftype ConstrainedSum [alts path sym var]
  (assert (instance? (any-of Symbol
                             c/NoSymbol) sym))
  
  Stringable
  (string-list [_]
    (list "(ConstrainedSum " (str alts) ")"))

  Container
  (map [c f]
    (.alts c (map alts f)))

  (map [c f embed]
    (map (map alts f embed)
         (partial .alts c))))

(deftype CollectFieldConsts [fields ast]
  (assert (instance? ast/params-ast fields))

  Stringable
  (string-list [_]
    (list "<CollectFieldConsts" (str fields) "\n" (str ast) ">"))

  Container
  (map [x f]
    (CollectFieldConsts (f fields) (f ast)))

  (map [x f embed]
    (for [new-fields (f fields)
          new-ast (f ast)]
      (CollectFieldConsts new-fields new-ast)))

  ast/IsCode
  (ast/generates-code? [x]
    (maybe x)))

(deftype ConstrainVar [constraint]
  (assert (instance? c/ValueConstraint constraint))

  Stringable
  (string-list [_]
    (list "(ConstrainVar " (str constraint) ")"))

  Container
  (map [x f]
    (ConstrainVar (f constraint)))

  (map [x f embed]
    (map (f constraint) ConstrainVar))

  ast/IsCode
  (ast/generates-code? [x]
    (maybe x)))
