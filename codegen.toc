
(add-ns c (git-dependency "https://github.com/Toccata-Lang/constraints.git"
                          "constraints.toc"
                          :sha "45e2277"))
(add-ns ast (git-dependency "https://github.com/Toccata-Lang/ast.git"
                            "ast.toc"
                            :sha "7e0d62e"))
(add-ns b (module "base.toc"))

(defprotocol CodeGen
  (pre-gen [_])
  (gen-code [_]))

(def DefaultPreGen (any-of ast/inline-ast
                           ast/main-ast))

(extend-type DefaultPreGen
  CodeGen
  (pre-gen [x]
    x))

(extend-type ast/inline-ast
  CodeGen
  (gen-code [x]
    (b/code-out (.txt x))))

;; (extend-type ast/main-ast
;;   CodeGen
;;   (gen-code [ast]
;;     (for [
;;           ;; TODO: add param assertions
;;           fn-arity (emit-fn-arity (ast/tag 'main) "" (.params ast) (.body ast))
;;           fn-arity (cond (instance? StaticArity fn-arity)
;;                          (-> fn-arity
;;                              .var-info
;;                              .init
;;                              declare
;;                              (map (fn [_]
;;                                     (.var-info fn-arity (.init (.var-info fn-arity) [])))))

;;                          (sm/state-maybe fn-arity))
;;           ;; _ (debug "======= done main")
;;           _ (sm/assoc-in-val [.module .values 'main] fn-arity)]
;;       [empty-c-code])))

(defn emit-code [_ ast]
  (hylo pre-gen
        gen-code
        ast))
