
(add-ns c (git-dependency "https://github.com/Toccata-Lang/constraints.git"
                          "constraints.toc"
                          :sha "dcba6be"))
(add-ns ast (git-dependency "https://github.com/Toccata-Lang/ast.git"
                            "ast.toc"
                            :sha "f93f741"))
(add-ns se (git-dependency "https://github.com/Toccata-Lang/state-error.git"
                           "state-error.toc"
                           :sha "71dfbbe"))
(add-ns b (module "base.toc"))

(def lf "\n")
(def lflf "\n\n")

(def line-sep "")

(def output (agent (maybe 'output)))

(defn code-out [& code]
  (send output (fn [out-file?]
                 (hylo (fn [x]
                         (cond (or (instance? String x)
                                   (instance? Integer x))
                               (do
                                 (print x)
                                 [])

                               x))
                       (fn [x]
                         (cond (instance? Sequence x)
                               x

                               (print x)))
                       code)
                 out-file?)))

(defn wait-for-output []
  (let [p (promise)]
    (send output (fn [outfile]
                   (deliver p outfile)
                   outfile))
    (extract p)))

(deftype C-code [var decl init refs-map]
  (assert (instance? String var))
  (assert (instance? Vector decl))
  (assert (instance? Vector init))
  (assert (instance? HashMap refs-map))

  Composition
  (comp* [expr exprs]
    (reduce exprs expr
            (fn [code expr-code]
              (C-code (.var expr-code)
                      (comp (.decl code) (.decl expr-code))
                      (comp (.init code) (.init expr-code))
                      (merge-with + (.refs-map code) (.refs-map expr-code)))))))

(def empty-c-code (C-code "" [] [] {}))

(defprotocol CodeGen
  (gen-call [tgt args]
    (assert-result r (instance? se/StateError r))
    )

  (gen-code [ast mod]
    (assert-result r (instance? se/StateError r))
    )

  (gen-code [ast mod arity]
    (assert-result r (instance? se/state-error r))

    (gen-code ast mod)))

(defn emit-code [ast mod]
  (cond (instance? ast/inline-ast ast)
        (se/state-error (code-out (.txt ast)))

        (for [code (gen-code ast mod)]
          (code-out (.decl code)))))

(extend-type c/TaggedSymbol
  CodeGen
  (gen-code [x mod]
    (let [var (.var (either (get-in mod [.values 0 x])
                            x))]
      (se/state-error (.var empty-c-code var)))))

(extend-type ast/inline-ast
  CodeGen
  (gen-code [x mod]
    (cond (= (.var x) "")
          (se/state-error (.init empty-c-code [(.txt x)]))

          (se/state-error (.decl empty-c-code ["Value *" (.var x) " = " (.txt x) ";"]))))

  (gen-code [x mod arity]
    (gen-code x mod)))

(defn checking-fn [params arity-fn-var]
  (assert (instance? ast/params-ast params))
  (let [loc (ast/location params)
        checking-fn-var (b/global-var "checkerFn")]
    (cond (instance? c/TaggedSymbol (.variadic params))
          (do
            ;; (c-code checking-fn-var
            ;;         ["Value *" checking-fn-var
            ;;          "(FnArity *arity, Value *args) {\n"
            ;;          line
            ;;          "int " checked-var "= 1;"
            ;;          (-> constraints
            ;;              (c/update-var "args")
            ;;              ;; TODO: what if runtime-check is empty?
            ;;              (runtime-check c/top-type file-name line-number checked-var))
            ;;          "if(!" checked-var "){abort();}" line-sep
            ;;          "return(" arity-fn-var
            ;;          "(arity, args));\n};\n"]
            ;;         {} c/top-type)
            (print-err 'variadic-check-fn _LINE_)
            (abort)
            )

          (every (.fixed params) (fn [param]
                                   (and (instance? c/TaggedSymbol param)
                                        (instance? c/ParamConstraint (.constraint param)))))
          (.var empty-c-code arity-fn-var)

          ;; (c-code checking-fn-var
          ;;         ["Value *" checking-fn-var "("
          ;;          (-> param-vars
          ;;              (map (fn [param] (str "Value *" param)))
          ;;              (seq)
          ;;              (conj "FnArity *arity")
          ;;              (interpose ", "))
          ;;          ") {\n"
          ;;          line
          ;;          "int " checked-var "= 1;"
          ;;          (for [[constraint var] (zip-lists constraints-list
          ;;                                            param-vars)]
          ;;            ;; TODO: what if runtime-check is empty?
          ;;            (-> constraint
          ;;                (c/update-var var)
          ;;                (runtime-check c/top-type file-name line-number checked-var)))
          ;;          "if(!" checked-var "){abort();}" line-sep
          ;;          "return(" arity-fn-var "("
          ;;          (-> param-vars
          ;;              (seq)
          ;;              (conj "arity")
          ;;              (interpose ", "))
          ;;          "));\n};\n"]
          ;;         {} c/top-type)
          (do
            (print-err 'fixed-checked-fn _LINE_)
            (abort)))))

(extend-type ast/fn-arity-ast
  CodeGen
  (gen-code [ast mod]
    (map (se/traverse (.body ast) (fn [expr]
                                    (gen-code expr mod ast)))
         (fn [body-exprs]
           ;; TODO: add dec-refs
           (comp* empty-c-code body-exprs)))))

(extend-type b/StaticArity
  CodeGen
  (gen-code [ast mod]
    (let [arity-var (.arity-var ast)]
      (for [arity-code (gen-code (.arity ast) mod)]
        (cond (= (-> ast .arity .params .variadic)
                 c/no-symbol)
              ;; fixed arity
              (let [params (-> ast .arity .params .fixed)
                    checker (checking-fn (-> ast .arity .params) arity-var)]
                (-> empty-c-code
                    (.var arity-var)
                    (.decl ["Value *" arity-var "("
                            (-> (reduce params ["FnArity *arity"]
                                        (fn [args arg]
                                          (conj args (str "Value *" (.var arg)))))
                                (interpose ", "))
                            ") {\nwhile (1) {\n"
                            (.init arity-code)

                            line-sep
                            "};};\n"
                            (.decl checker)
                            "FnArity " (.fn-var (.arity ast)) " = {FnArityType, -2, "
                            (count params)
                            ", (Vector *)0, (Value *)0, 0"
                            ", " (.var checker)
                            ", (Value *)0, (Value *)0"
                            "};" line-sep])))

              ;; variadic arity
              (do
                (print-err 'finish-this _LINE_)
                (se/state-error (abort))))))))

(extend-type ast/fn-ast
  CodeGen
  (gen-code [ast mod]
    (let [fn-sym (.fn-sym ast)
          arities (.arities ast)]
      ;; TODO: what if fn-sym is c/no-symbol
      (cond (every arities (fn [arity]
                             (instance? b/StaticArity arity)))
            (for [code-vect (se/traverse arities
                                         (fn [arity]
                                           (gen-code arity mod)))]
              (comp* (C-code ""
                             ["\n// --------- " fn-sym " -------------\n"]
                             [] {})
                     code-vect))

            (do
              (print-err 'finish _FILE_ _LINE_)
              (se/state-error (abort)))))))

(extend-type ast/definition-ast
  CodeGen
  (gen-code [ast mod]
    (let [[expr] (.value-exprs ast)]
      (gen-code expr mod))))

(extend-type ast/integer-ast
  CodeGen
  (gen-code [ast mod]
    (let [num (.int ast)]
      (comp (se/get-in-val [.constants .numbers num])
            (for [const-nums (se/get-in-val [.constants .numbers])
                  :let [num-idx (count const-nums)
                        num-sym (str "num" num-idx)
                        num-ptr (str "numPtr" num-idx)]
                  _ (se/assoc-in-val [.constants .numbers num]
                                     (.var empty-c-code num-ptr))]
              (-> empty-c-code
                  (.decl ["Integer " num-sym " = {IntegerType, -2, " num "};\n"
                          "Value *" num-ptr " = (Value *)&" num-sym ";\n"])
                  (.var num-ptr)))))))

(extend-type ast/string-ast
  CodeGen
  (gen-code [ast mod]
    (let [str-val (.string ast)
          str-len (count str-val)]
      (comp (se/get-in-val [.constants .strings str-val])
            (for [const-strs (se/get-in-val [.constants .strings])
                  :let [str-idx (count const-strs)
                        str-sym (str "str" str-idx)
                        str-ptr (str "strPtr" str-idx)]
                  _ (se/assoc-in-val [.constants .strings str-val]
                                     (.var empty-c-code str-ptr))]
              (-> empty-c-code
                  (.decl ["struct {TYPE_SIZE type;
        REFS_SIZE refs;
        Integer *hash;
        int64_t len;
        char buffer["
                          (inc str-len)
                          "];\n} " str-sym " = {StringBufferType, -1, 0, "
                          str-len ", \"" (escape-chars str-val) "\"};\n"
                          "Value *" str-ptr " = (Value *)&" str-sym ";\n"])
                  (.var str-ptr)))))))

(extend-type ast/call-ast
  CodeGen
  (gen-code [ast mod]
    (for [tgt-expr (gen-code (.call-target ast) mod )
          arg-exprs (se/traverse (.args ast) (fn [arg-ast]
                                               (gen-code arg-ast mod)))
          call-expr (gen-call (.call-target ast) (.args ast))]
      (comp (comp* tgt-expr arg-exprs)
            call-expr))))

(extend-type ast/block-comment-ast
  CodeGen
  (gen-code [ast mod]
    (se/state-error empty-c-code)))

(defn emit-main [main-module]
  (let [main-fn (either (get-in main-module [.values 0 ast/main .arities 0 .arity-var])
                        (do
                          (b/status "'main' function is missing or malformed")
                          ;; TODO: make sure to abort
                          ;; (abort)
                          ))
        ;; wait-prom (promise)
        ;; _ (send modules
        ;;         (fn [mods]
        ;;           (map (get mods core)
        ;;                (fn [ast-emitter]
        ;;                  (send ast-emitter
        ;;                        (fn [ctxt]
        ;;                          (map ctxt
        ;;                               (fn [ctxt]
        ;;                                 (.module ctxt (extract core-agent))))))
        ;;                  (send ast-emitter
        ;;                        (fn [ctxt]
        ;;                          (map ctxt
        ;;                               (fn [ctxt]
        ;;                                 (deliver wait-prom '_)
        ;;                                 ctxt))))))
        ;;           mods))
        ;; _ (extract wait-prom)
        inits []
        ;; inits (map-modules (for [proto-expr gather-protocols
        ;;                          ;; syms-expr gather-symbols
        ;;                          ]
        ;;                      (comp (.init proto-expr)
        ;;                            ;; (.init syms-expr)
        ;;                            )))
        ;; decls (map-modules (sm/get-in-val [.fn-context .decl]))
        ;; values-prom (promise)
        ;; _ (send rt-exprs (partial deliver values-prom))
        ;; values (extract values-prom)
        ]
    ;; (code-out decls)
    (code-out "\n#\n"
              "\nint main (int argc, char **argv) {\n"
              "prErrSTAR = &defaultPrErrSTAR;\n"
              "#ifdef SINGLE_THREADED\n"
              "#ifdef CHECK_MEM_LEAK\n"
              "fprintf(stderr, \"Cannot use SINGLE_THREADED (or TOCCATA_WASM) and CHECK_MEM_LEAK "
              "at same time.\");\n "
              "abort();\n"
              "#endif\n"
              "#endif\n"
              "maybeNothing = maybe((Vector *)0, (Value *)0, nothing);\n"
              "maybeNothing->refs = -1;\n"
              "outstream = stdout;\n"
              "__atomic_store(&futuresQueue.input, &empty_list, __ATOMIC_RELAXED);\n"
              "futuresQueue.output = empty_list;\n"
              "pthread_mutex_init(&futuresQueue.mutex, NULL);\n"
              "pthread_cond_init(&futuresQueue.notEmpty, NULL);\n"
              "pthread_mutex_init(&shutDown.access, NULL);\n"
              "startWorkers();\n"
              inits
              ;; (map values .init)
              ;; "init_module_0();\n"
              ;; "init_module_1();\n"
              "\n#\n"
              "  Vector *argVect = empty_vect;\n"
              "  for(int i = 0; i < argc; i++) {\n"
              "    argVect = mutateVectConj(argVect, stringValue(argv[i]));\n"
              "  }\n"
              "  argVect->refs = -1;\n"

              "Value *the_final_answer = " main-fn
              "((FnArity *)0, (Value *)argVect);\n\n"

              "#ifdef CHECK_MEM_LEAK\n"
              "cleaningUp = 1;\n"
              "mainThreadDone = 1;\n"
              "waitForWorkers();\n"
              ;; (map-modules (for [expr (sm/get-in-val [.module .values 0 symbols-sym])]
              ;;                (free-global (c-init (.c-var expr) [] {} "" 0))))
              ;; (map-modules (sm/get-in-val [.setup .cleanup]))
              ;; (map values free-global)
              "\n#\n"
              ;; TODO: change to argVect
              ;; "for(List *l = argVect; l != (List *)0; l = l->tail) {\n"
              ;; "   l->refs = 1;\n"
              ;; "}\n"
              ;; TODO: casting argVect to List * is a temp hack
              "  cleanupMemory(the_final_answer, maybeNothing, (List *)argVect);\n"
              "  if (malloc_count - free_count != 0)\n"
              "    return(1);\n"
              "#endif"
              "\n#\n"
              "  return(0);\n};\n"
              "\nint typeCount = " (extract b/type-counter) ";\n")))

(def core-dispatchers (-> [(c/tag 'type-name) 1 "type_name"
                           (c/tag 'zero) 1 "zero"
                           (c/tag 'invoke) 1 "invoke0Args"
                           (c/tag 'invoke) 2 "invoke1Arg"
                           (c/tag 'invoke) 3 "invoke2Args"
                           (c/tag '=*) 2 "equalSTAR"
                           (c/tag 'hash-seq) 2 "hashSeq"
                           (c/tag 'count) 1 "count"
                           (c/tag 'vals) 1 "vals"
                           (c/tag 'first) 1 "first"
                           (c/tag 'rest) 1 "rest"
                           (c/tag 'seq) 1 "seq"
                           (c/tag 'sha1) 1 "sha1"
                           (c/tag 'has-field) 2 "hasField"
                           (c/tag 'show) 1 "showFn"
                           (c/tag 'new-hash-set) 1 "newHashSet"
                           (c/tag 'apply) 2 "fn_apply"
                           (c/tag 'pr-value) 1 "prValue"]
                          (partition 3)))

(defn fixup-core-dispatchers [x core-mod]
  (map core-dispatchers
       (fn [[sym arg-count var]]
         (let [arity-sym (either (map (get-in core-mod [.value-types 0 sym])
                                      (fn [proto-impls]
                                        '_))
                                 ;; TODO: abort with message instead
                                 (str "noImpl" arg-count))]
           (code-out "Value *(*" var ")(FnArity *, "
                     (-> (repeat arg-count "Value *")
                         (interpose ","))
                     ") = " arity-sym ";\n"))
         ))
  x)

;; Notes:

;; 2 kinds of arities static and closure with a variadic and fixed variant of each.

;; All fn's have a 'c-fn' name which is the name of C function.
;; The C function always returns a Value *.

;; The c-fn has to be pointed to by a FnArity struct, which in turn is pointed to by a Function struct.

;; Whether a fn is static or closure is only determined after it has been analyzed. Should happen in the type checker

;; Have to handle tail-exprs

;; For static fn's:

;; There is also another C function that will first check the types of all the parameters
;; and then call the other function to actually do the work.

;; Emitting static arity
;; collapse all the expressions
