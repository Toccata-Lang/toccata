
;; 'core' is a virtual value. It is a hash map that all the symbols defined in this file will end up in.
;; It maps symbol literals to values
;; (def core {})

(inline C "#include <limits.h>\n")

;; There's a special hook in the compiler that will print the type of the input to this function
;; at compile time.
(defn show-type [x]
  x)

(defn is-type [x y]
  x)

(defn prefs [s v]
  ;; if you're using this function, you're so far off in the weeds, I can't help you
  ! StringBuffer s
  (inline C " prefs(extractStr(s_0), v_1);\nreturn(v_1);\n"))

(def Sequence (any-of List
                      Vector))
(def String (any-of StringBuffer
                    SubString))
(def HashMap (any-of HashCollisionNode
                     ArrayNode
                     BitmapIndexedNode))

(defn maybe [v]
  !returns (maybe-of (type-of v))

  ;; wrap `v` in a Maybe value
  (inline C Maybe "return(maybe((FnArity *)0, (Value *)0, v_0));"))
