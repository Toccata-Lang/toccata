
(deftype Third [x]
  Stringable
  (string-list [_]
    (list "(Third " (str x) ")")))

(deftype Second [y x]
  (assert (instance? Third x))

  Stringable
  (string-list [_]
    (list "(Second " (str x) ")")))

(deftype First [x]
  (assert (instance? Second x))

  Stringable
  (string-list [_]
    (list "(First " (str x) ")")))

(defn f [v q]
  (assert (instance? First v))

  (.x v (.x (.x v) (.x (.x (.x v)) q))))

(main [_]
  (-> (First (Second 's (Third 9)))
      (f 'q)
      .x
      .x
      .x
      inc))
