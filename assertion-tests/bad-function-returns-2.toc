
(deftype Failure [])

(deftype new-se [invoke-fn]
  ;; (assert (instance? Fn invoke-fn))
  (assert (instance? (function-returns Vector) invoke-fn))

  Stringable
  (string-list [x]
    (comp (list "<new-se ")
          (string-list (.invoke-fn x))
          (list ">")))

  Function
  (invoke [ev s]
    (invoke-fn s))

  Container
  (map [ev f]
    (new-se (fn [s]
              (let [x (invoke-fn s)]
                (either (= Failure x)
                        (let [[v new-s] x]
                          [(f v) new-s]))))))

  (wrap [_ v]
    (new-se (fn [s]
              [v s])))

  (flat-map [ev f]
    (new-se (fn [s]
              (let [x (invoke-fn s)]
                (either (= Failure x)
                        (let [[v new-s] x]
                          ((f v) new-s))))))))

(def state-error
  (reify
    Function
    (invoke [_ v]
      (new-se (fn [s]
                [v s])))))


(main [_]
  (print-err ((for [x (state-error 8)
                    y (state-error 9)]
                (subs y 1))
              'state)))
