
(deftype Third [x]
  ;; Stringable
  ;; (string-list [_]
  ;;   (list "(Third " (str x) ")"))
  )

(deftype Second [y z]
  (assert (instance? Third z))

  ;; Stringable
  ;; (string-list [_]
  ;;   (list "(Second " (str x) ")"))
  )

(deftype First [t]
  (assert (instance? Second t))

  ;; Stringable
  ;; (string-list [_]
  ;;   (list "(First " (str x) ")"))
  )

(defn f [_ v q]
  ;; (assert (instance? First v))
  (assert (instance? Second v))

  ;; (.t v
  ;;     (.z
  ;;      (.t v)
  ;;      (.x
  ;;       (.z
  ;;        (.t v))
  ;;       q)))
  (.z v
      (.x
       (.z v)
       q))
  )

(main [_]
  (-> ;; (First (Second 's (Third 9)))
      
      (f 'wur (Second 's (Third 9)) 'q)
      ;; .t
      .z
      .x
      inc))
