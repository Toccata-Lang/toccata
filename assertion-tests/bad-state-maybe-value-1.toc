
(deftype new-sm [invoke-fn]
  Stringable
  (string-list [x]
    (comp (list "<new-sm ")
          (string-list (.invoke-fn x))
          (list ">")))

  Function
  (invoke [ev s]
    (invoke-fn s))

  Container
  (map [mv f]
    (new-sm (fn [s]
              (let [a (invoke-fn s)]
                (and a (let [[v new-s] (extract a)]
                         (maybe [(f v) new-s])))))))

  (wrap [b v]
    (new-sm (fn [s]
              (maybe [v s]))))

  (flat-map [ev f]
    (new-sm (fn [s]
              (let [d (invoke-fn s)]
                (and d (let [[v ss] (extract d)]
                         ((f v) ss)))))))

  Composition
  (zero [_] (new-sm (fn [_] nothing))))

(def state-maybe
  (reify
    Type
    (type-name [_]
      "*state-maybe wrapper*")

    Container
    (apply [_ [v]]
      (new-sm (fn [s]
                (maybe [v s]))))

    Function
    (invoke [_ v]
      (new-sm (fn [s]
                (maybe [v s]))))

    Composition
    (zero [_] (new-sm (fn [_] nothing)))))

(def zero-sm
  (zero state-maybe))

(main [_]
  (flat-map (new-sm (fn [s]
                      (maybe ['a s])))
            (fn [x]
              (state-maybe (inc x))))

  (print-err 'done))
