
(deftype new-sm [invoke-fn]
  Function
  (invoke [ev s]
    (invoke-fn s))
  
  Container
  (flat-map [ev f]
    (new-sm (fn [s]
              (let [d (invoke-fn s)]
                (and d (let [[v ss] (extract d)]
                         ((f v) ss))))))))

(def state-maybe
  (reify
    Function
    (invoke [_ v]
      (new-sm (fn [s]
                (maybe [v s]))))))

(defn f []
  (flat-map
   (new-sm
    (fn fn1 [s]
      (maybe
       ['a s])))
   (fn [x]
     (state-maybe (inc x)))))

(main [_]
  (f))
