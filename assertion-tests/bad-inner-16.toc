
(defn f [x]
  (map (maybe 3)
       (fn [_]
         (inc x))))

(defn g [x]
  (for [y (f x)]
    ;; TODO: this causes an error but shouldn't
    (do
      (assert (instance? Integer y))
      y)))

(defn h [q]
  (for [_ (maybe 3)]
    (symbol q)))

(defn i [x]
  (for [y (h x)]
    i))

(defn j [x]
  ;; TODO: there should be a conflict between the result of '(g x)' and the
  ;; and the parameter 'y' in '(i y)'
  (flat-map (g x)
            (fn [y]
              (map (i y)
                   (fn [_]
                     x))))
  ;; (for [y (show-type (g x))
  ;;       _ (i (show-type y))]
  ;;   x)
  )

(main [_]
  (print-err (j 8)))
