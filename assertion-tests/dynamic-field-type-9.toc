
(deftype Fourth [x]
  ;; Stringable
  ;; (string-list [_]
  ;;   (list "(Fourth " (str x) ")"))
  )

(deftype Third [p]
  (assert (instance? Fourth p))

  ;; Stringable
  ;; (string-list [_]
  ;;   (list "(Third " (str p) ")"))
  )

(deftype Second [y z]
  (assert (instance? Third z))

  ;; Stringable
  ;; (string-list [_]
  ;;   (list "(Second " (str z) ")"))
  )

(deftype First [t]
  (assert (instance? Second t))

  ;; Stringable
  ;; (string-list [_]
  ;;   (list "(First " (str t) ")"))
  )

(defn f [_ v q]
  (assert (instance? First v))

  (.t v
      (.z (.t v)
          (.p (.z (.t v))
              (.x (.p (.z (.t v)))
                  q)))))

(main [_]
  (-> (f 'wur (First (Second 's (Third (Fourth 9)))) 'q)
      .t
      .z
      .p
      .x
      inc))
