
(inline "
#define _XOPEN_SOURCE 600
#include <stdlib.h>
#include <limits.h>
#include \"new-core.h\"

// TODO: these are only needed until core.toc codegen is complete
Value *noImpl1(FnArity *arity, Value *str_0) {
abort();
}

Value *noImpl2(FnArity *arity, Value *str_0, Value *arg1) {
abort();
}

Value *noImpl3(FnArity *arity, Value *str_0, Value *arg1, Value *arg2) {
abort();
}

")


(defn pr* [str]
  ;; If a block comment appears first in the body, it serves
  ;; as the documentation for the function
  (inline Integer
   "if (str_0->type == StringBufferType) {
      fprintf(stdout, \"%-.*s\", (int)((String *)str_0)->len, ((String *)str_0)->buffer);
    } else if (str_0->type == SubStringType) {
      fprintf(stdout, \"%-.*s\", (int)((SubString *)str_0)->len, ((SubString *)str_0)->buffer);
    } else {
      fprintf(stdout, \"\\ninvalid type for 'pr*'\\n\");
      abort();
    }
    dec_and_free(str_0, 1);
    return(integerValue(1));\n")
  ;; But block comments that appear after are ignored
  )

(defn list [& l]
  l)

(def vector)

; For types that have some notion of equality between their values
(defprotocol Eq
  (=* [x y]
    ;; Compare two values for equality
    !returns (maybe-of (any-of (type-of x)
                               (type-of y)))
    )
  ;; (=* [x y z]
  ;;   ;; just to try multiple arities
  ;;   !returns (maybe-of (any-of (type-of x)
  ;;                              (type-of y)))
  ;;   )
  )
