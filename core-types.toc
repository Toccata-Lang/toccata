
(is-type show-type
         (c/FnConstraint
          {1 (c/fn-arity 'fn-arity0
                         (c/ListConstraint [(c/ParamConstraint 'fn-arity0 0 empty-list 'x "")]
                                           c/no-tail empty-list c/no-symbol "")
                         (c/ParamConstraint 'fn-arity0 0 empty-list 'x ""))}
          empty-list 'show-type ""))

(is-type maybe
         (c/FnConstraint
          {1 (c/fn-arity 'fn-arity3
                         (c/ListConstraint [(c/ParamConstraint 'fn-arity3 0 empty-list 'v "")]
                                           c/no-tail empty-list c/no-symbol "")
                         (c/MaybeConstraint (c/ParamConstraint 'fn-arity3 0 empty-list 'v "")
                                            empty-list c/no-symbol ""))}
          empty-list 'maybe ""))

(is-type (maybe 9)
         (c/MaybeConstraint (c/IntegerConstraint 9 2147483647 -2147483648 empty-list c/no-symbol "")
                            empty-list c/no-symbol ""))

(is-type (maybe 'a)
         (c/MaybeConstraint (c/SymbolConstraint 'a empty-list c/no-symbol "")
                            empty-list c/no-symbol ""))

(is-type int-max
         (c/IntegerConstraint 2147483647 2147483647 -2147483648 empty-list c/no-symbol ""))

(is-type mutate-vect-conj
         (c/FnConstraint
          {2 (c/fn-arity 'fn-arity9
                         (c/ListConstraint [(c/ComputedConstraint 
                                             [(c/ParamConstraint 'fn-arity9 0 empty-list 'v "")
                                              (c/VectorConstraint
                                               [] (c/CollectionOf c/top-type empty-list c/no-symbol "")
                                               empty-list 'v "")]
                                             [] empty-list 'v "")
                                            (c/ParamConstraint 'fn-arity9 1 empty-list 'x "")]
                                           c/no-tail empty-list c/no-symbol "")
                         (c/VectorConstraint
                          [] (c/CollectionOf
                              (c/SumConstraint
                               [(c/ParamConstraint 'fn-arity9 1 empty-list 'x "")

                                (c/ComputedConstraint 
                                 [(c/ParamConstraint 'fn-arity9 0 empty-list 'v "")
                                  (c/VectorConstraint
                                   [] (c/CollectionOf c/top-type empty-list c/no-symbol "") empty-list 'v "")
                                  (c/InnerTypeOfConstraint 'v empty-list  c/no-symbol "")]
                                 [] empty-list 'v "")] empty-list c/no-symbol "")
                              empty-list c/no-symbol "")
                          empty-list c/no-symbol ""))}
          empty-list 'mutate-vect-conj ""))

;; TODO: add when 'vector' is defined
;; (is-type (mutate-vect-conj ['x] 8)
;;          c/top-type)

(is-type list-count
         (c/FnConstraint
          {1 (c/fn-arity 'fn-arity10
                         (c/ListConstraint [(c/ComputedConstraint 
                                             [(c/ParamConstraint 'fn-arity10 0 empty-list 'l "")
                                              (c/ListConstraint
                                               [] (c/CollectionOf c/top-type empty-list c/no-symbol "")
                                               empty-list 'l "")]
                                             [] empty-list 'l "")]
                                           c/no-tail empty-list c/no-symbol "")
                         (c/IntegerConstraint c/no-int 2147483647 -2147483648 empty-list c/no-symbol ""))}
          empty-list 'list-count ""))

(is-type list-map
         (c/FnConstraint
          {2 (c/fn-arity 'fn-arity11
                         (c/ListConstraint [(c/ComputedConstraint 
                                             [(c/ParamConstraint 'fn-arity11 0 empty-list 'l "")
                                              (c/ListConstraint
                                               [] (c/CollectionOf
                                                   (c/ComputedConstraint 
                                                    [(c/ParamConstraint 'fn-arity11 1 empty-list 'lf "")
                                                     (c/ArgOf 'lf 0 empty-list c/no-symbol "")]
                                                    [] empty-list 'lf "")
                                                   empty-list c/no-symbol "")
                                               empty-list 'l "")]
                                             [] empty-list 'l "")
                                            (c/ParamConstraint 'fn-arity11 1 empty-list 'lf "")]
                                           c/no-tail empty-list c/no-symbol "")
                         (c/ListConstraint
                          [] (c/CollectionOf
                              (c/ComputedConstraint 
                               [(c/ParamConstraint 'fn-arity11 1 empty-list 'lf "")
                                (c/CallValue c/no-args empty-list c/no-symbol "")]
                               [] empty-list 'lf "")
                              empty-list c/no-symbol "")
                          empty-list c/no-symbol ""))}
          empty-list 'list-map ""))

;; TODO: for when 'list' and 'inc' are defined
;; (is-type (map '(1 2 3) inc)
;;          c/top-type)

(is-type add-numbers
         (c/FnConstraint
          {2 (c/fn-arity 'fn-arity13
                         (c/ListConstraint
                          [(c/ComputedConstraint 
                            [(c/ParamConstraint 'fn-arity13 0 empty-list 'x "")
                             (c/IntegerConstraint c/no-int 2147483647 -2147483648 empty-list 'x "")]
                            [] empty-list 'x "")
                           (c/ComputedConstraint 
                            [(c/ParamConstraint 'fn-arity13 1 empty-list 'y "")
                             (c/IntegerConstraint c/no-int 2147483647 -2147483648 empty-list 'y "")]
                            [] empty-list 'y "")]
                          c/no-tail empty-list c/no-symbol "")
                         (c/IntegerConstraint c/no-int 2147483647 -2147483648 empty-list c/no-symbol ""))}
          empty-list 'add-numbers ""))

(is-type cons
         (c/FnConstraint
          {2 (c/fn-arity 'fn-arity28
                         (c/ListConstraint
                          [(c/ParamConstraint 'fn-arity28 0 empty-list 'x "")
                           (c/ComputedConstraint 
                            [(c/ParamConstraint 'fn-arity28 1 empty-list 'l "")
                             (c/ListConstraint [] (c/CollectionOf c/top-type empty-list c/no-symbol "")
                                               empty-list 'l "")]
                            [] empty-list 'l "")]
                          c/no-tail empty-list c/no-symbol "")
                         (c/ListConstraint
                          [(c/ParamConstraint 'fn-arity28 0 empty-list 'x "")]
                          (c/ComputedConstraint 
                           [(c/ParamConstraint 'fn-arity28 1 empty-list 'l "")
                            (c/ListConstraint [] (c/CollectionOf c/top-type empty-list c/no-symbol "")
                                              empty-list 'l "")
                            (c/CollectionOf c/top-type empty-list c/no-symbol "")]
                           [] empty-list 'l "") empty-list c/no-symbol ""))}
          empty-list 'cons ""))

(is-type empty-list
         (c/ListConstraint [] c/no-tail empty-list 'empty-list ""))

(is-type (cons 'a empty-list)
         (c/ListConstraint [(c/SymbolConstraint 'a empty-list c/no-symbol "")]
                           c/no-tail empty-list c/no-symbol ""))

(is-type (cons 1 (cons 'a empty-list))
         (c/ListConstraint [(c/IntegerConstraint 1 2147483647 -2147483648 empty-list c/no-symbol "")
                            (c/SymbolConstraint 'a empty-list c/no-symbol "")]
                           c/no-tail empty-list c/no-symbol ""))

(is-type maybe-map
         (c/FnConstraint
          {2 (c/fn-arity 'fn-arity35
                         (c/ListConstraint [(c/ComputedConstraint 
                                             [(c/ParamConstraint 'fn-arity35 0 empty-list 'mv "")
                                              (c/MaybeConstraint (c/ComputedConstraint 
                                                                  [(c/ParamConstraint 'fn-arity35 1 empty-list 'f "")
                                                                   (c/ArgOf 'f 0 empty-list c/no-symbol "")]
                                                                  [] empty-list 'f "")
                                                                 empty-list 'mv "")]
                                             [] empty-list 'mv "")
                                            (c/ComputedConstraint 
                                             [(c/ParamConstraint 'fn-arity35 1 empty-list 'f "")
                                              (c/AritiesRequired [1] empty-list 'f "")]
                                             [] empty-list 'f "")]
                                           c/no-tail empty-list c/no-symbol "")
                         (c/MaybeConstraint (c/ComputedConstraint 
                                             [(c/ParamConstraint 'fn-arity35 1 empty-list 'f "")
                                              (c/AritiesRequired [1] empty-list 'f "")
                                              (c/CallValue c/no-args empty-list c/no-symbol "")]
                                             [] empty-list 'f "")
                                            empty-list c/no-symbol ""))}
          empty-list 'maybe-map ""))

;; (def _ '_)
;; (is-type _
;;          (c/intersect (c/ListConstraint [] c/no-tail empty-list 'empty-list "")
;;                       (c/ListConstraint [] c/no-tail empty-list 'empty-list "")))
