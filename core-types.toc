
(is-type show-type
         (c/fn-c []
                 {1 (c/fn-arity 'fn-arity0
                                (c/list-c [(c/param 'fn-arity0 0)])
                                (c/param 'fn-arity0 0))}))

(is-type maybe
         (c/fn-c []
                 {1 (c/fn-arity 'fn-arity3
                                (c/list-c [(c/param 'fn-arity3 0)])
                                (c/MaybeConstraint (c/param 'fn-arity3 0)))}))

(is-type (maybe 9)
         (c/MaybeConstraint (c/IntegerConstraint 9)))

(is-type (maybe 'a)
         (c/MaybeConstraint (c/SymbolConstraint 'a)))

(is-type int-max
         (c/IntegerConstraint 2147483647))

(is-type mutate-vect-conj
         (c/fn-c []
                 {2 (c/fn-arity 'fn-arity9
                                (c/list-c [(c/multi [(c/param 'fn-arity9 0)
                                                     c/vect-constraint])
                                           (c/param 'fn-arity9 1)])
                                (c/vect-c []
                                          (c/coll-of-c (c/sum-c [(c/param 'fn-arity9 1)
                                                                 (c/type-op c/inner-type-of-op
                                                                            (c/multi [(c/param 'fn-arity9 0)
                                                                                      c/vect-constraint]))]))))}))

(is-type (#impl vec)
         (c/fn-c [] {1 (c/fn-arity 'vec
                                   (c/list-c [(c/param 'vec 0)])
                                   (c/type-op c/vect-from-op (c/param 'vec 0)))}))

(is-type (#impl vec List)
         (c/fn-c []
                 {1 (c/fn-arity 'fn-arity82
                                (c/list-c [(c/multi
                                            [(c/param 'fn-arity82 0)
                                             c/list-constraint])])
                                (c/multi
                                 [(c/type-op c/vect-from-op (c/multi [(c/param 'fn-arity82 0)
                                                                      c/list-constraint]))
                                  (c/type-op c/vect-from-op (c/param 'fn-arity82 0))]))}))

(is-type (vec (list 'a 'b 'c))
         (c/vect-c [(c/SymbolConstraint 'a)
                    (c/SymbolConstraint 'b)
                    (c/SymbolConstraint 'c)]))

(is-type ['x 'y 4]
         (c/vect-c [(c/SymbolConstraint 'x)
                    (c/SymbolConstraint 'y)
                    (c/IntegerConstraint 4)]))

(is-type (vector 'x)
         (c/vect-c [(c/SymbolConstraint 'x)]))

(is-type (mutate-vect-conj ['x] 8)
         (c/vect-c [] (c/coll-of-c (c/sum-c
                                    [(c/IntegerConstraint 8)
                                     (c/SymbolConstraint 'x)]))))

(is-type list-count
         (c/fn-c []
                 {1 (c/fn-arity 'fn-arity10
                                (c/list-c [(c/multi [(c/param 'fn-arity10 0)
                                                     c/list-constraint])])
                                c/int-constraint)}))

(is-type list-map
         (c/fn-c []
                 {2 (c/fn-arity 'fn-arity11
                                (c/list-c [(c/multi
                                            [(c/param 'fn-arity11 0)
                                             (c/list-c []
                                                       (c/coll-of-c
                                                        (c/type-op c/arg-of-op
                                                                   (c/multi [(c/param 'fn-arity11 1)
                                                                             (.required-arities c/fn-constraint
                                                                                                [1])])
                                                                   0)))])
                                           (c/multi [(c/param 'fn-arity11 1)
                                                     (.required-arities c/fn-constraint [1])])])
                                (c/list-c []
                                          (c/coll-of-c
                                           (c/type-op
                                            c/call-value-op
                                            (c/multi [(c/param 'fn-arity11 1)
                                                      (.required-arities c/fn-constraint [1])])
                                            [(c/type-op
                                              c/inner-type-of-op
                                              (c/multi
                                               [(c/param 'fn-arity11 0)
                                                (c/list-c []
                                                          (c/coll-of-c
                                                           (c/type-op c/arg-of-op
                                                                      (c/multi [(c/param 'fn-arity11 1)
                                                                                (.required-arities c/fn-constraint
                                                                                                   [1])])
                                                                      0)))]))]))))}))

(is-type (list-map '(1 a 3) (fn [x] x))
         (c/list-c [] (c/coll-of-c (c/sum-c
                                    [(c/IntegerConstraint 1)
                                     (c/SymbolConstraint 'a)
                                     (c/IntegerConstraint 3)]))))

(is-type add-numbers
         (c/fn-c []
                 {2 (c/fn-arity 'fn-arity13
                                (c/list-c [(c/multi [(c/param 'fn-arity13 0)
                                                     c/int-constraint])
                                           (c/multi [(c/param 'fn-arity13 1)
                                                     c/int-constraint])])
                                c/int-constraint)}))

(is-type cons
         (c/fn-c []
                 {2 (c/fn-arity 'fn-arity28
                                (c/list-c [(c/param 'fn-arity28 0)
                                           (c/multi [(c/param 'fn-arity28 1)
                                                     c/list-constraint])])
                                (c/list-c [(c/param 'fn-arity28 0)]
                                          (c/multi [(c/param 'fn-arity28 1)
                                                    c/list-constraint])))}))

(is-type empty-list
         c/empty-list-constraint)

(is-type (cons 'a empty-list)
         (c/list-c [(c/SymbolConstraint 'a)]))

(is-type (cons 1 (cons 'a empty-list))
         (c/list-c [(c/IntegerConstraint 1)
                    (c/SymbolConstraint 'a)]))

(is-type maybe-map
         (c/fn-c []
                 {2 (c/fn-arity
                     'fn-arity35
                     (c/list-c [(c/multi [(c/param 'fn-arity35 0)
                                          (c/MaybeConstraint (c/type-op c/arg-of-op (c/param 'fn-arity35 1) 0))])
                                (c/param 'fn-arity35 1)])
                     (c/MaybeConstraint
                      (c/type-op c/call-value-op (c/param 'fn-arity35 1)
                                 [(c/type-op c/inner-type-of-op
                                             (c/multi [(c/param 'fn-arity35 0)
                                                       (c/MaybeConstraint
                                                        (c/type-op c/arg-of-op (c/param 'fn-arity35 1) 0))]))])))}))

(is-type vector
         (c/fn-c []
                 {c/variadic (c/fn-arity 'fn-arity94
                                         (c/list-c []
                                                   (c/multi [(c/param 'fn-arity94 0)
                                                             c/list-constraint]))
                                         (c/multi [(c/type-op c/vect-from-op (c/param 'fn-arity94 0))
                                                   c/vect-constraint]))}))

(is-type (maybe-map (maybe 3) vector)
         (c/MaybeConstraint
          (c/vect-c [(c/IntegerConstraint 3)])))

(is-type ['x 'y 4]
         (c/vect-c [(c/SymbolConstraint 'x)
                    (c/SymbolConstraint 'y)
                    (c/IntegerConstraint 4)]))

(is-type (maybe-map (maybe 's) (fn [x]
                                 (add-numbers 1 x)))
         c/bottom-type)

(is-type (maybe-map (maybe 8) (fn [x]
                                (add-numbers 1 x)))
         (c/MaybeConstraint c/int-constraint))

(is-type subs
         (c/fn-c []
                 {2 (c/fn-arity 'fn-arity44
                                (c/list-c [(c/multi [(c/param 'fn-arity44 0)
                                                     c/string-constraint])
                                           (c/multi [(c/param 'fn-arity44 1)
                                                     (c/IntegerConstraint c/no-int 2147483647 0)])])
                                c/substr-constraint)
                  3 (c/fn-arity 'fn-arity43
                                (c/list-c [(c/multi [(c/param 'fn-arity43 0)
                                                     c/string-constraint])
                                           (c/multi [(c/param 'fn-arity43 1)
                                                     (c/IntegerConstraint c/no-int 2147483647 0)])
                                           (c/multi [(c/param 'fn-arity43 2)
                                                     (c/IntegerConstraint c/no-int 2147483647 0)])])
                                c/substr-constraint)}))

(is-type symbol
         (c/fn-c [] {1 (c/fn-arity 'fn-arity45
                                   (c/list-c [(c/multi [(c/param 'fn-arity45 0)
                                                        c/string-constraint])])
                                   (c/SymbolConstraint c/no-symbol))}))

(is-type future
         (c/fn-c [] {1 (c/fn-arity 'fn-arity49
                                   (c/list-c [(c/multi [(c/param 'fn-arity49 0)
                                                        (.required-arities c/fn-constraint [0])])])
                                   c/future-constraint)
                     0 (c/fn-arity 'fn-arity50
                                   c/empty-list-constraint
                                   c/future-constraint)}))

;; TODO put in after hash-maps are folded into ReifiedConstraint
;; (is-type (#impl hash-vec)
;;          (c/fn-c
;;           []
;;           {2 (c/fn-arity 'hash-vec
;;                          (c/list-c
;;                           [(c/compute-c
;;                             [(c/param 'hash-vec 0 empty-list 'm "")
;;                              (c/sum-c
;;                               [(c/HashMapConstraint 11 {} c/top-type c/top-type empty-list c/no-symbol "")
;;                                (c/HashMapConstraint 12 {} c/top-type c/top-type empty-list c/no-symbol "")
;;                                (c/HashMapConstraint 13 {} c/top-type c/top-type empty-list c/no-symbol "")]
;;                               empty-list 'm "")]
;;                             empty-list 'm "")
;;                            (c/compute-c
;;                             [(c/param 'hash-vec 1 empty-list 'v "")
;;                              (c/vect-c [] (c/coll-of-c c/top-type empty-list c/no-symbol "")
;;                                                  empty-list 'v "")]
;;                             empty-list 'v "")]
;;                           c/no-tail empty-list c/no-symbol "")
;;                          (c/vect-c [] (c/coll-of-c c/top-type empty-list c/no-symbol "")
;;                                              empty-list c/no-symbol ""))}
;;           empty-list c/no-symbol ""))

(is-type comp
         (c/fn-c []
                 {c/variadic (c/fn-arity 'fn-arity74
                                         (c/list-c [(c/param 'fn-arity74 0)]
                                                   (c/multi [(c/param 'fn-arity74 1)
                                                             c/list-constraint]))
                                         c/top-type)
                  1 (c/fn-arity 'fn-arity75
                                (c/list-c [(c/param 'fn-arity75 0)])
                                (c/param 'fn-arity75 0))}))

(is-type (#impl flat-map)
         (c/fn-c []
                 {2 (c/fn-arity
                     'flat-map
                     (c/list-c [(c/multi [(c/param 'flat-map 0)
                                          (c/coll-of-c
                                           (c/type-op c/arg-of-op
                                                      (c/multi [(c/param 'flat-map 1)
                                                                (.required-arities c/fn-constraint [1])]) 0))])
                                (c/multi [(c/param 'flat-map 1)
                                          (.required-arities c/fn-constraint [1])])])
                     (c/type-op c/call-value-op (c/multi [(c/param 'flat-map 1)
                                                          (.required-arities c/fn-constraint [1])])))}))

(is-type (#impl map)
         (c/fn-c []
                 {2 (c/fn-arity 'map
                                (c/list-c [(c/multi [(c/param 'map 0)
                                                     (c/coll-of-c (c/type-op c/arg-of-op
                                                                             (c/param 'map 1)
                                                                             0))])
                                           (c/multi [(c/param 'map 1)
                                                     (.required-arities c/fn-constraint [1])])])
                                c/top-type)
                  3 (c/fn-arity 'map
                                (c/list-c [(c/multi [(c/param 'map 0)
                                                     (c/coll-of-c (c/type-op c/arg-of-op
                                                                             (c/param 'map 1)
                                                                             0))])
                                           (c/multi [(c/param 'map 1)
                                                     (.required-arities c/fn-constraint [1])])
                                           (c/multi [(c/param 'map 2)
                                                     (.required-arities c/fn-constraint [1])])])
                                (c/sum-c [(c/type-op c/call-value-op
                                                     (c/multi [(c/param 'map 2)
                                                               (.required-arities c/fn-constraint [1])]))
                                          (c/type-op c/call-value-op
                                                     (c/multi [(c/param 'map 1)
                                                               (.required-arities c/fn-constraint [1])]))]))}))

(is-type (#impl extend)
         (c/fn-c [] {2 (c/fn-arity 'extend
                                   (c/list-c [(c/param 'extend 0)
                                              (c/multi [(c/param 'extend 1)
                                                        (.required-arities c/fn-constraint [1])])])
                                   c/top-type)}))

(is-type (#impl extract)
         (c/fn-c []
                 {1 (c/fn-arity 'extract
                                (c/list-c [(c/param 'extract 0)])
                                (c/type-op c/inner-type-of-op (c/param 'extract 0)))}))

(is-type (#impl duplicate)
         (c/fn-c []
                 {1 (c/fn-arity 'duplicate
                                (c/list-c [(c/param 'duplicate 0)])
                                c/top-type)}))

(is-type Predicate
         (c/intersect (.required-arities c/fn-constraint [1])
                      (c/coll-of-c c/maybe-constraint)))

(defn tg [f y]
  ;; TODO: this shows the problem of intersecting two ComputedConstraints that have TypeOps
  ;; !returns (inner-type-of (type-of-result f))
  (extract (f y)))

;; TODO: put back in later
;; (is-type tg
;;          (c/fn-c
;;           []
;;           {2 (c/fn-arity 'fn-arity77
;;                          (c/list-c [(c/param 'fn-arity77 0 empty-list 'f "")
;;                                             (c/param 'fn-arity77 1 empty-list 'y "")]
;;                                            c/no-tail empty-list c/no-symbol "")
;;                          (c/compute-c
;;                           [(c/param 'fn-arity77 0 empty-list 'f "")
;;                            (c/type-op c/call-value-op [(c/param 'fn-arity77 1 empty-list c/no-symbol "")]
;;                                      empty-list)
;;                            c/inner-type-of]
;;                           empty-list 'f ""))}
;;           empty-list 'tg ""))

(is-type (tg maybe 8)
         (c/IntegerConstraint 8))

(is-type (#impl filter)
         (c/fn-c []
                 {2 (c/fn-arity
                     'filter
                     (c/list-c [(c/multi
                                 [(c/param 'filter 0)
                                  (c/coll-of-c
                                   (c/type-op c/arg-of-op
                                              (c/multi
                                               [(c/param 'filter 1)
                                                (c/intersect (.required-arities c/fn-constraint [1])
                                                             (c/coll-of-c c/maybe-constraint))]) 0))])
                                (c/multi
                                 [(c/param 'filter 1)
                                  (c/intersect (.required-arities c/fn-constraint [1])
                                               (c/coll-of-c c/maybe-constraint))])])
                     (c/coll-of-c (c/type-op c/arg-of-op
                                             (c/multi
                                              [(c/param 'filter 1)
                                               (c/intersect (.required-arities c/fn-constraint [1])
                                                            (c/coll-of-c c/maybe-constraint))]) 0)))}))

(defn tf [x]
  (instance? Symbol x))

(is-type (#impl reduce)
         (c/fn-c []
                 {3 (c/fn-arity
                     'reduce
                     (c/list-c [(c/multi
                                 [(c/param 'reduce 0)
                                  (c/coll-of-c (c/type-op c/arg-of-op
                                                          (c/multi
                                                           [(c/param 'reduce 2)
                                                            (.required-arities c/fn-constraint [2])]) 1))])
                                (c/param 'reduce 1)
                                (c/multi
                                 [(c/param 'reduce 2)
                                  (.required-arities c/fn-constraint [2])])])
                     (c/sum-c [(c/param 'reduce 1)
                               (c/type-op c/call-value-op (c/multi [(c/param 'reduce 2)
                                                                    (.required-arities c/fn-constraint [2])])
                                          [(c/sum-c [(c/param 'reduce 1)
                                                     (c/type-op c/call-value-op
                                                                (c/multi
                                                                 [(c/param 'reduce 2)
                                                                  (.required-arities c/fn-constraint [2])]))])
                                           (c/type-op
                                            c/inner-type-of-op
                                            (c/multi
                                             [(c/param 'reduce 0)
                                              (c/coll-of-c
                                               (c/type-op c/arg-of-op
                                                          (c/multi
                                                           [(c/param 'reduce 2)
                                                            (.required-arities c/fn-constraint [2])]) 1))]))])]))}))

(is-type (#impl seq)
         (c/fn-c []
                 {1 (c/fn-arity 'seq
                                (c/list-c [(c/param 'seq 0)])
                                (c/type-op c/list-from-op (c/param 'seq 0)))}))

(is-type (#impl first)
         (c/fn-c []
                 {1 (c/fn-arity 'first
                                (c/list-c [(c/param 'first 0)])
                                (c/type-op c/first-of-op (c/param 'first 0)))}))

(is-type (#impl last)
         (c/fn-c []
                 {1 (c/fn-arity 'last
                                (c/list-c [(c/param 'last 0)])
                                (c/type-op c/last-of-op (c/param 'last 0)))}))

(is-type (#impl rest)
         (c/fn-c []
                 {1 (c/fn-arity 'rest
                                (c/list-c [(c/param 'rest 0)])
                                (c/type-op c/rest-of-op (c/param 'rest 0)))}))

(is-type (#impl butlast)
         (c/fn-c []
                 {1 (c/fn-arity 'butlast
                                (c/list-c [(c/param 'butlast 0)])
                                (c/type-op c/butlast-of-op (c/param 'butlast 0)))}))

(is-type (#impl split)
         (c/fn-c []
                 {2 (c/fn-arity 'split
                                (c/list-c [(c/param 'split 0)
                                           (c/multi [(c/param 'split 1)
                                                     c/int-constraint])])
                                (c/vect-c [(c/coll-of-c (c/type-op c/inner-type-of-op (c/param 'split 0)))
                                           (c/coll-of-c (c/type-op c/inner-type-of-op (c/param 'split 0)))]))}))

(is-type (#impl split-with)
         (c/fn-c []
                 {2 (c/fn-arity
                     'split-with
                     (c/list-c [(c/param 'split-with 0)
                                (c/multi
                                 [(c/param 'split-with 1)
                                  (c/intersect (.required-arities c/fn-constraint [1])
                                               (c/coll-of-c c/maybe-constraint))])])
                     (c/vect-c [(c/coll-of-c (c/type-op c/inner-type-of-op (c/param 'split-with 0)))
                                (c/coll-of-c (c/type-op c/inner-type-of-op (c/param 'split-with 0)))]))
                  3 (c/fn-arity
                     'split-with
                     (c/list-c [(c/param 'split-with 0)
                                (c/multi
                                 [(c/param 'split-with 1)
                                  (c/intersect (.required-arities c/fn-constraint [1])
                                               (c/coll-of-c c/maybe-constraint))])
                                (c/multi
                                 [(c/param 'split-with 2)
                                  (c/sum-c [c/list-constraint

                                            c/vect-constraint])])])
                     (c/vect-c [(c/coll-of-c (c/type-op c/inner-type-of-op (c/param 'split-with 0)))
                                (c/coll-of-c (c/type-op c/inner-type-of-op (c/param 'split-with 0)))]))}))

(is-type (#impl drop-while)
         (c/fn-c []
                 {2 (c/fn-arity 'drop-while
                                (c/list-c [(c/param 'drop-while 0)
                                           (c/multi
                                            [(c/param 'drop-while 1)
                                             (c/intersect (.required-arities c/fn-constraint [1])
                                                          (c/coll-of-c c/maybe-constraint))])])
                                (c/coll-of-c (c/type-op c/inner-type-of-op (c/param 'drop-while 0))))}))

(is-type (#impl reverse)
         (c/fn-c []
                 {1 (c/fn-arity 'reverse
                                (c/list-c [(c/param 'reverse 0)])
                                c/top-type)}))

(is-type second
         (c/fn-c []
                 {1 (c/fn-arity 'fn-arity77
                                (c/list-c [(c/param 'fn-arity77 0)])
                                (c/type-op c/first-of-op
                                           (c/type-op c/rest-of-op
                                                      (c/param 'fn-arity77 0))
                                          ))}))

(is-type (#impl store)
         (c/fn-c []
                 {3 (c/fn-arity 'store
                                (c/list-c [(c/param 'store 0)
                                           (c/multi [(c/param 'store 1)
                                                     c/int-constraint])
                                           (c/param 'store 2)])
                                (c/MaybeConstraint (c/sum-c [(c/type-op c/inner-type-of-op (c/param 'store 0))
                                                             (c/param 'store 2)])))}))

(is-type list-reduce
         (c/fn-c []
                 {3 (c/fn-arity
                     'fn-arity78
                     (c/list-c [(c/multi [(c/param 'fn-arity78 0)
                                          (c/list-c [] (c/coll-of-c (c/type-op c/arg-of-op
                                                                               (c/param 'fn-arity78 2) 1 )))])
                                (c/param 'fn-arity78 1)
                                (c/multi [(c/param 'fn-arity78 2)
                                          (.required-arities c/fn-constraint [2])])])
                     (c/sum-c [(c/param 'fn-arity78 1)
                               (c/multi [(c/type-op c/call-value-op
                                                    (c/multi [(c/param 'fn-arity78 2)
                                                              (.required-arities c/fn-constraint [2])])
                                                    [(c/sum-c [(c/param 'fn-arity78 1)
                                                               (c/type-op
                                                                c/call-value-op
                                                                (c/multi [(c/param 'fn-arity78 2)
                                                                          (.required-arities c/fn-constraint
                                                                                             [2])]))])
                                                     (c/type-op c/inner-type-of-op
                                                                (c/multi [(c/param 'fn-arity78 0)
                                                                          (c/list-c [] (c/coll-of-c
                                                                                        (c/type-op
                                                                                         c/arg-of-op
                                                                                         (c/param 'fn-arity78 2)
                                                                                         1)))])
                                                               )])
                                         (c/param 'fn-arity78 1)])
                               (c/type-op c/call-value-op
                                          (c/multi [(c/param 'fn-arity78 2)
                                                    (.required-arities c/fn-constraint [2])])
                                          [(c/sum-c [(c/param 'fn-arity78 1)
                                                     (c/type-op c/call-value-op
                                                                (c/multi [(c/param 'fn-arity78 2)
                                                                          (.required-arities c/fn-constraint
                                                                                             [2])]))])
                                           (c/type-op c/inner-type-of-op
                                                      (c/multi [(c/param 'fn-arity78 0)
                                                                (c/list-c [] (c/coll-of-c
                                                                              (c/type-op c/arg-of-op
                                                                                         (c/param 'fn-arity78 2)
                                                                                         1)))])
                                                     )])]))}))

(is-type (list-reduce '(x 1 "q") 0 (fn wut-fn [_ x] x))
         (c/sum-c
          [(c/IntegerConstraint 0)
           (c/SymbolConstraint 'x)
           (c/IntegerConstraint 1)
           (c/StrBuffConstraint "q")]))

(is-type (#impl =* List)
         (c/fn-c []
                 {2 (c/fn-arity 'fn-arity79
                                (c/list-c [(c/multi [(c/param 'fn-arity79 0)
                                                     c/list-constraint])
                                           (c/param 'fn-arity79 1)])
                                (c/MaybeConstraint (c/param 'fn-arity79 0)))}))

(is-type (#impl filter List)
         (c/fn-c []
                 {2 (c/fn-arity 'fn-arity84
                                (c/list-c [(c/multi [(c/param 'fn-arity84 0)
                                                     c/list-constraint
                                                     (c/coll-of-c (c/type-op c/arg-of-op
                                                                             (c/param 'fn-arity84 1)
                                                                             0))])
                                           (c/multi [(c/param 'fn-arity84 1)
                                                     (c/intersect (.required-arities c/fn-constraint [1])
                                                                  (c/coll-of-c c/maybe-constraint))])])
                                (c/list-c [] (c/coll-of-c (c/type-op c/arg-of-op (c/param 'fn-arity84 1) 0))))}))

(is-type (#impl reverse List)
         (c/fn-c []
                 {1 (c/fn-arity 'fn-arity80
                                (c/list-c [(c/multi [(c/param 'fn-arity80 0)
                                                     c/list-constraint])])
                                (c/list-c [] (c/coll-of-c (c/type-op c/inner-type-of-op
                                                                     (c/multi [(c/param 'fn-arity80 0)
                                                                               c/list-constraint])
                                                                    ))))}))

(is-type (#impl rest List)
         (c/fn-c []
                 {1 (c/fn-arity 'fn-arity83
                                (c/list-c [(c/multi [(c/param 'fn-arity83 0)
                                                     c/list-constraint])])
                                (c/type-op c/rest-of-op (c/param 'fn-arity83 0)))}))

(is-type (rest '(a b c))
         (c/list-c [(c/SymbolConstraint 'b)
                    (c/SymbolConstraint 'c)]))

(is-type (seq ['a 'b 'c])
         (c/list-c [(c/SymbolConstraint 'a)
                    (c/SymbolConstraint 'b)
                    (c/SymbolConstraint 'c)]))

(is-type (#impl reverse Vector)
         (c/fn-c []
                 {1 (c/fn-arity 'fn-arity85
                                (c/list-c [(c/multi [(c/param 'fn-arity85 0)
                                                     c/vect-constraint])])
                                (c/vect-c [] (c/coll-of-c (c/type-op c/inner-type-of-op
                                                                     (c/multi [(c/param 'fn-arity85 0)
                                                                               c/vect-constraint])
                                                                    ))))}))

(is-type (#impl store Vector)
         (c/fn-c []
                 {3 (c/fn-arity 'fn-arity88
                                (c/list-c [(c/multi [(c/param 'fn-arity88 0)
                                                     c/vect-constraint])
                                           (c/multi [(c/param 'fn-arity88 1)
                                                     c/int-constraint])
                                           (c/param 'fn-arity88 2)])
                                (c/MaybeConstraint (c/sum-c [(c/type-op c/inner-type-of-op
                                                                        (c/param 'fn-arity88 0))
                                                             (c/param 'fn-arity88 2)])))}))

(is-type (#impl get Vector)
         (c/fn-c []
                 {2 (c/fn-arity 'fn-arity87
                                (c/list-c [(c/multi [(c/param 'fn-arity87 0)
                                                     c/vect-constraint])
                                           (c/multi [(c/param 'fn-arity87 1)
                                                     c/int-constraint])])
                                (c/MaybeConstraint (c/type-op c/inner-type-of-op
                                                              (c/multi [(c/param 'fn-arity87 0)
                                                                        c/vect-constraint]))))}))

(is-type (get ['a 1 "b"] 8)
         (c/MaybeConstraint (c/sum-c
                             [(c/SymbolConstraint 'a)
                              (c/IntegerConstraint 1)
                              (c/StrBuffConstraint "b")])))

(is-type (#impl =* Integer)
         (c/fn-c []
                 {2 (c/fn-arity 'fn-arity97
                                (c/list-c [(c/multi [(c/param 'fn-arity97 0)
                                                     c/int-constraint])
                                           (c/param 'fn-arity97 1)])
                                (c/MaybeConstraint (c/param 'fn-arity97 0)))}))

(is-type inc
         (c/fn-c []
                 {1 (c/fn-arity 'fn-arity101
                                (c/list-c [(c/multi [(c/param 'fn-arity101 0)
                                                     c/int-constraint])])
                                c/int-constraint)}))

;; TODO: this kind of sucks
(is-type (comp "a" "bc ")
         c/top-type)

(is-type (#impl reduce StringBuffer)
         (c/fn-c []
                 {3 (c/fn-arity 'fn-arity161
                                (c/list-c [(c/multi [(c/param 'fn-arity161 0)
                                                     c/strbuff-constraint
                                                     (c/coll-of-c (c/type-op c/arg-of-op
                                                                             (c/param 'fn-arity161 2)
                                                                             1))])
                                           (c/param 'fn-arity161 1)
                                           (c/multi [(c/param 'fn-arity161 2)
                                                     (.required-arities c/fn-constraint [2])])])
                                (c/sum-c [(c/param 'fn-arity161 1)
                                          (c/type-op c/call-value-op
                                                     (c/param 'fn-arity161 2)
                                                     [(c/sum-c [(c/param 'fn-arity161 1)
                                                                (c/type-op c/call-value-op
                                                                           (c/param 'fn-arity161 2))])
                                                      (c/multi [(c/type-op c/inner-type-of-op
                                                                           (c/param 'fn-arity161 0))
                                                                (c/type-op c/arg-of-op
                                                                           (c/param 'fn-arity161 2) 1)])])]))}))

(is-type (#impl seq StringBuffer)
         (c/fn-c []
                 {1 (c/fn-arity 'fn-arity115
                                (c/list-c [(c/multi [(c/param 'fn-arity115 0)
                                                     c/strbuff-constraint])])
                                (c/multi [(c/type-op c/list-from-op
                                                     (c/multi [(c/param 'fn-arity115 0)
                                                               c/strbuff-constraint]))
                                          (c/type-op c/list-from-op
                                                     (c/param 'fn-arity115 0))]))}))

(is-type (seq "abc")
         (c/list-c [(c/SubStrConstraint "a")
                    (c/SubStrConstraint "b")
                    (c/SubStrConstraint "c")]))

(is-type (first "abc")
         (c/MaybeConstraint c/substr-constraint))

(is-type (rest "abc")
         c/substr-constraint)

(is-type (last "abc")
         (c/MaybeConstraint c/substr-constraint))

(is-type (butlast "abc")
         c/substr-constraint)

(is-type (#impl reverse StringBuffer)
         (c/fn-c []
                 {1 (c/fn-arity 'fn-arity113
                                (c/list-c [(c/multi [(c/param 'fn-arity113 0)
                                                     c/strbuff-constraint])])
                                (c/multi [c/strbuff-constraint
                                          (c/coll-of-c (c/multi [(c/type-op c/inner-type-of-op
                                                                            (c/multi [(c/param 'fn-arity113 0)
                                                                                      c/strbuff-constraint]))
                                                                 c/substr-constraint]))]))}))

(is-type (reverse "123")
         (c/multi [c/strbuff-constraint
                   (c/coll-of-c (c/sum-c [(c/SubStrConstraint "1")
                                          (c/SubStrConstraint "2")
                                          (c/SubStrConstraint "3")]))]))

(is-type (#impl split-with StringBuffer)
         (c/fn-c []
                 {3 (c/fn-arity 'fn-arity129
                                (c/list-c [(c/multi [(c/param 'fn-arity129 0)
                                                     c/strbuff-constraint])
                                           (c/multi [(c/param 'fn-arity129 1)
                                                     (c/intersect (.required-arities c/fn-constraint [1])
                                                                  (c/coll-of-c c/maybe-constraint))])
                                           (c/multi [(c/param 'fn-arity129 2)
                                                     c/vect-constraint])])
                                (c/vect-c [(c/multi [c/substr-constraint
                                                     (c/coll-of-c (c/multi [(c/type-op c/inner-type-of-op
                                                                                       (c/param 'fn-arity129 0))
                                                                            c/substr-constraint]))])
                                           (c/multi [c/substr-constraint
                                                     (c/coll-of-c (c/multi [(c/type-op c/inner-type-of-op
                                                                                       (c/param 'fn-arity129 0))
                                                                            c/substr-constraint]))])]))
                  2 (c/fn-arity 'fn-arity135
                                (c/list-c [(c/multi [(c/param 'fn-arity135 0)
                                                     c/strbuff-constraint])
                                           (c/multi [(c/param 'fn-arity135 1)
                                                     (c/intersect (.required-arities c/fn-constraint [1])
                                                                  (c/coll-of-c c/maybe-constraint))])])
                                (c/vect-c [(c/multi [c/substr-constraint
                                                     (c/coll-of-c (c/multi [(c/type-op c/inner-type-of-op
                                                                                       (c/param 'fn-arity135 0))
                                                                            c/substr-constraint]))])
                                           (c/multi [c/substr-constraint
                                                     (c/coll-of-c (c/multi [(c/type-op c/inner-type-of-op
                                                                                       (c/param 'fn-arity135 0))
                                                                            c/substr-constraint]))])]))}))

(is-type (split-with "8815" (partial =* 8) [])
         (c/vect-c [(c/multi [c/substr-constraint
                              (c/coll-of-c (c/sum-c [(c/SubStrConstraint "8")
                                                     (c/SubStrConstraint "1")
                                                     (c/SubStrConstraint "5")]))])
                    (c/multi [c/substr-constraint
                              (c/coll-of-c (c/sum-c [(c/SubStrConstraint "8")
                                                     (c/SubStrConstraint "1")
                                                     (c/SubStrConstraint "5")]))])]))

(is-type (#impl split SubString)
         (c/fn-c []
                 {2 (c/fn-arity 'fn-arity112
                                (c/list-c [(c/multi [(c/param 'fn-arity112 0)
                                                     c/substr-constraint])
                                           (c/multi [(c/param 'fn-arity112 1)
                                                     (c/IntegerConstraint c/no-int 2147483647 0)])])
                                (c/vect-c [(c/multi [c/substr-constraint
                                                     (c/coll-of-c (c/multi [(c/type-op c/inner-type-of-op
                                                                                       (c/param 'fn-arity112 0))
                                                                            c/substr-constraint]))])
                                           (c/multi [c/substr-constraint
                                                     (c/coll-of-c (c/multi [(c/type-op c/inner-type-of-op
                                                                                       (c/param 'fn-arity112 0))
                                                                            c/substr-constraint]))])]))}))

(is-type (#impl nth SubString)
         (c/fn-c []
                 {2 (c/fn-arity 'fn-arity159
                                (c/list-c [(c/multi [(c/param 'fn-arity159 0)
                                                     c/substr-constraint])
                                           (c/multi [(c/param 'fn-arity159 1)
                                                     (c/IntegerConstraint c/no-int 2147483647 0)])])
                                (c/MaybeConstraint (c/type-op c/inner-type-of-op
                                                              (c/param 'fn-arity159 0))))}))

(is-type (#impl drop-while StringBuffer)
         (c/fn-c []
                 {2 (c/fn-arity 'fn-arity169
                                (c/list-c [(c/multi [(c/param 'fn-arity169 0)
                                                     c/strbuff-constraint])
                                           (c/multi [(c/param 'fn-arity169 1)
                                                     (c/intersect (.required-arities c/fn-constraint [1])
                                                                  (c/coll-of-c c/maybe-constraint))])])
                                (c/multi [c/substr-constraint
                                          (c/coll-of-c (c/multi [(c/type-op c/inner-type-of-op
                                                                            (c/param 'fn-arity169 0))
                                                                 c/substr-constraint]))]))}))

(is-type (drop-while "884412" (partial =* "8"))
         (c/multi [c/substr-constraint
                   (c/coll-of-c (c/sum-c [(c/SubStrConstraint "8")
                                          (c/SubStrConstraint "4")
                                          (c/SubStrConstraint "1")
                                          (c/SubStrConstraint "2")]))]))

(is-type (drop-while (subs "884412" 1) (partial =* "8"))
         (c/multi [c/substr-constraint
                   (c/coll-of-c c/substr-constraint)]))

(is-type (#impl take-while StringBuffer)
         (c/fn-c []
                 {2 (c/fn-arity 'fn-arity171
                                (c/list-c [(c/multi [(c/param 'fn-arity171 0)
                                                     c/strbuff-constraint])
                                           (c/multi [(c/param 'fn-arity171 1)
                                                     (c/intersect (.required-arities c/fn-constraint [1])
                                                                  (c/coll-of-c c/maybe-constraint))])])
                                (c/multi [c/substr-constraint
                                          (c/coll-of-c (c/multi [(c/type-op c/inner-type-of-op
                                                                            (c/param 'fn-arity171 0))
                                                                 c/substr-constraint]))]))}))

(is-type (take-while "884412" (partial =* "8"))
         (c/multi [c/substr-constraint
                   (c/coll-of-c (c/sum-c [(c/SubStrConstraint "8")
                                          (c/SubStrConstraint "4")
                                          (c/SubStrConstraint "1")
                                          (c/SubStrConstraint "2")]))]))

(is-type (take-while (subs "884412" 1) (partial =* "8"))
         (c/multi [c/substr-constraint
                   (c/coll-of-c c/substr-constraint)]))

(is-type (#impl to-str StringBuffer)
         (c/fn-c []
                 {1 (c/fn-arity 'fn-arity173
                                (c/list-c [(c/multi [(c/param 'fn-arity173 0)
                                             c/strbuff-constraint])])
                                (c/multi [(c/param 'fn-arity173 0)
                                          c/strbuff-constraint]))}))

(is-type maybe-apply
         (c/fn-c []
                 {3 (c/fn-arity 'fn-arity175
                                (c/list-c [(c/multi [(c/param 'fn-arity175 0)
                                                     c/maybe-constraint])
                                           (c/multi [(c/param 'fn-arity175 1)
                                                     (c/sum-c [(c/vect-c [] (c/coll-of-c c/maybe-constraint))
                                                               (c/list-c [] (c/coll-of-c c/maybe-constraint))])])
                                           (c/multi [(c/param 'fn-arity175 2)
                                                     c/vect-constraint])])
                                (c/MaybeConstraint (c/type-op c/call-value-op
                                                              (c/type-op c/inner-type-of-op
                                                                         (c/multi [(c/param 'fn-arity175 0)
                                                                                   c/maybe-constraint])))))}))

(is-type (maybe-apply (maybe inc) (list (maybe 8)) [])
         (c/MaybeConstraint c/int-constraint))

(is-type (#impl type-args Maybe)
         (c/fn-c []
                 {1 (c/fn-arity 'fn-arity185
                                (c/list-c [(c/multi [(c/param 'fn-arity185 0)
                                                     c/maybe-constraint])])
                                (c/sum-c [(c/vect-c [(c/type-op c/inner-type-of-op
                                                                (c/param 'fn-arity185 0))])
                                          c/empty-vect-constraint]))}))

(is-type (type-args (maybe 9))
         (c/sum-c [(c/vect-c [(c/IntegerConstraint 9)])
                   c/empty-vect-constraint]))

(is-type (#impl map Maybe)
         (c/fn-c []
                 {2 (c/fn-arity 'fn-arity193
                                (c/list-c [(c/multi [(c/param 'fn-arity193 0)
                                                     (c/MaybeConstraint (c/type-op c/arg-of-op
                                                                                   (c/param 'fn-arity193 1)
                                                                                   0))])
                                           (c/multi [(c/param 'fn-arity193 1)
                                                     (.required-arities c/fn-constraint [1])])])
                                (c/MaybeConstraint (c/type-op c/call-value-op
                                                              (c/param 'fn-arity193 1)
                                                              [(c/multi [(c/type-op c/inner-type-of-op
                                                                                    (c/param 'fn-arity193 0))
                                                                         (c/type-op c/arg-of-op
                                                                                    (c/param 'fn-arity193 1)
                                                                                    0)])])))
                  3 (c/fn-arity 'fn-arity194
                                (c/list-c [(c/multi [(c/param 'fn-arity194 0)
                                                     c/maybe-constraint
                                                     (c/coll-of-c (c/type-op c/arg-of-op
                                                                             (c/param 'fn-arity194 1)
                                                                             0))])
                                           (c/multi [(c/param 'fn-arity194 1)
                                                     (.required-arities c/fn-constraint [1])])
                                           (c/multi [(c/param 'fn-arity194 2)
                                                     (.required-arities c/fn-constraint [1])])])
                                (c/sum-c [(c/type-op c/call-value-op
                                                     (c/param 'fn-arity194 2))
                                          (c/type-op c/call-value-op
                                                     (c/param 'fn-arity194 1))]))}))

(is-type interpose
         (c/fn-c []
                 {2 (c/fn-arity 'fn-arity204
                                (c/list-c [(c/multi [(c/param 'fn-arity204 0)
                                                     c/seq-constraint
                                                     (c/coll-of-c c/top-type)])
                                           (c/param 'fn-arity204 1)])
                                (c/sum-c
                                 [(c/vect-c []
                                            (c/coll-of-c (c/sum-c [(c/type-op c/inner-type-of-op
                                                                              (c/multi [(c/param 'fn-arity204 0)
                                                                                        c/seq-constraint]))
                                                                   (c/param 'fn-arity204 1)])))

                                  (c/list-c []
                                            (c/coll-of-c (c/sum-c [(c/type-op c/inner-type-of-op
                                                                              (c/multi [(c/param 'fn-arity204 0)
                                                                                        c/seq-constraint]))
                                                                   (c/param 'fn-arity204 1)])))]))}))

(is-type (#impl reduce List)
         (c/fn-c []
                 {3 (c/fn-arity 'fn-arity246
                                (c/list-c [(c/multi [(c/param 'fn-arity246 0)
                                                     (c/list-c []
                                                               (c/coll-of-c (c/type-op c/arg-of-op
                                                                                       (c/param 'fn-arity246 2)
                                                                                       1)))])
                                           (c/param 'fn-arity246 1)
                                           (c/multi [(c/param 'fn-arity246 2)
                                                     (.required-arities c/fn-constraint [2])])])
                                (c/sum-c [(c/param 'fn-arity246 1)
                                          (c/multi [(c/param 'fn-arity246 1)
                                                    (c/type-op c/call-value-op
                                                               (c/param 'fn-arity246 2)
                                                               [(c/sum-c [(c/param 'fn-arity246 1)
                                                                          (c/type-op c/call-value-op
                                                                                     (c/param 'fn-arity246 2)
                                                                                     c/no-args)])
                                                                (c/multi [(c/type-op c/inner-type-of-op
                                                                                     (c/param 'fn-arity246 0))
                                                                          (c/type-op c/arg-of-op
                                                                                     (c/param 'fn-arity246 2)
                                                                                     1)])])])
                                          (c/multi [(c/type-op c/call-value-op
                                                               (c/param 'fn-arity246 2)
                                                               [(c/sum-c [(c/param 'fn-arity246 1)
                                                                          (c/type-op c/call-value-op
                                                                                     (c/param 'fn-arity246 2)
                                                                                     c/no-args)])
                                                                (c/multi [(c/type-op c/inner-type-of-op
                                                                                     (c/param 'fn-arity246 0))
                                                                          (c/coll-of-c
                                                                           (c/type-op c/arg-of-op
                                                                                      (c/param 'fn-arity246 2)
                                                                                      1))])])
                                                    (c/param 'fn-arity246 1)])
                                          (c/multi [(c/type-op c/call-value-op
                                                               (c/param 'fn-arity246 2)
                                                               [(c/sum-c [(c/param 'fn-arity246 1)
                                                                          (c/type-op c/call-value-op
                                                                                     (c/param 'fn-arity246 2)
                                                                                     c/no-args)])
                                                                (c/multi [(c/type-op c/inner-type-of-op
                                                                                     (c/param 'fn-arity246 0))
                                                                          (c/coll-of-c
                                                                           (c/type-op c/arg-of-op
                                                                                      (c/param 'fn-arity246 2)
                                                                                      1))])])
                                                    (c/param 'fn-arity246 1)
                                                    (c/type-op c/call-value-op
                                                               (c/param 'fn-arity246 2)
                                                               [(c/sum-c [(c/param 'fn-arity246 1)
                                                                          (c/type-op c/call-value-op
                                                                                     (c/param 'fn-arity246 2)
                                                                                     c/no-args)])
                                                                (c/multi [(c/type-op c/inner-type-of-op
                                                                                     (c/param 'fn-arity246 0))
                                                                          (c/type-op c/arg-of-op
                                                                                     (c/param 'fn-arity246 2)
                                                                                     1)])])])
                                          (c/multi [(c/type-op c/call-value-op
                                                               (c/param 'fn-arity246 2)
                                                               [(c/sum-c [(c/param 'fn-arity246 1)
                                                                          (c/type-op c/call-value-op
                                                                                     (c/param 'fn-arity246 2)
                                                                                     c/no-args)])
                                                                (c/multi [(c/type-op c/inner-type-of-op
                                                                                     (c/param 'fn-arity246 0))
                                                                          (c/coll-of-c
                                                                           (c/type-op c/arg-of-op
                                                                                      (c/param 'fn-arity246 2)
                                                                                      1))])])
                                                    (c/type-op c/call-value-op
                                                               (c/param 'fn-arity246 2)
                                                               [(c/sum-c [(c/param 'fn-arity246 1)
                                                                          (c/type-op c/call-value-op
                                                                                     (c/param 'fn-arity246 2)
                                                                                     c/no-args)])
                                                                (c/multi [(c/type-op c/inner-type-of-op
                                                                                     (c/param 'fn-arity246 0))
                                                                          (c/type-op c/arg-of-op
                                                                                     (c/param 'fn-arity246 2)
                                                                                     1)])])])]))}))

(is-type (#impl map List)
         (c/fn-c []
                 {2 (c/fn-arity 'fn-arity238
                                (c/list-c [(c/multi [(c/param 'fn-arity238 0)
                                                     (c/list-c []
                                                               (c/coll-of-c (c/type-op c/arg-of-op
                                                                                       (c/param 'fn-arity238 1)
                                                                                       0)))])
                                           (c/multi [(c/param 'fn-arity238 1)
                                                     (.required-arities c/fn-constraint [1])])])
                                (c/list-c []
                                          (c/coll-of-c
                                           (c/type-op c/call-value-op
                                                      (c/param 'fn-arity238 1)
                                                      [(c/multi [(c/type-op c/inner-type-of-op
                                                                            (c/param 'fn-arity238 0))
                                                                 (c/coll-of-c (c/type-op c/arg-of-op
                                                                                         (c/param 'fn-arity238 1)
                                                                                         0))])]))))
                  3 (c/fn-arity 'fn-arity239
                                (c/list-c [(c/multi [(c/param 'fn-arity239 0)
                                                     c/list-constraint
                                                     (c/coll-of-c (c/type-op c/arg-of-op
                                                                             (c/param 'fn-arity239 1)
                                                                             0))])
                                           (c/multi [(c/param 'fn-arity239 1)
                                                     (.required-arities c/fn-constraint [1])])
                                           (c/multi [(c/param 'fn-arity239 2)
                                                     (.required-arities c/fn-constraint [1])])])
                                (c/sum-c [(c/type-op c/call-value-op
                                                     (c/param 'fn-arity239 2)
                                                     c/no-args)
                                          (c/type-op c/call-value-op
                                                     (c/param 'fn-arity239 1)
                                                     c/no-args)]))}))

(is-type (map '(1 2 3) inc)
         (c/list-c [] (c/coll-of-c c/int-constraint)))

;; (defn inc-inner [x]
;;   (map x inc))

;; (is-type inc-inner
;;          c/top-type)

;; (is-type (inc-inner (maybe 'a))
;;          c/top-type)

;; (is-type (inc-inner '(7 x 3))
;;          c/top-type)

;; (defn cross-lists [l]
;;   (for [x '(p q r)
;;         y l]
;;     [x (inc y)]))

;; (is-type cross-lists
;;          c/top-type)

;; (is-type (cross-lists '(1 2 a))
;;          c/top-type)

;; (is-type _
;;          (c/reify-type-constraint
;;           (c/fn-arity
;;            'fn-arity11
;;            (c/list-c [(c/multi
;;                        [(c/param 'fn-arity11 0)
;;                         (c/list-c []
;;                                   (c/coll-of-c
;;                                    (c/type-op c/arg-of-op
;;                                               (c/multi [(c/param 'fn-arity11 1)
;;                                                         (.required-arities c/fn-constraint [1])])
;;                                               0)))])
;;                       (c/multi [(c/param 'fn-arity11 1)
;;                                 (.required-arities c/fn-constraint [1])])])
;;            (c/list-c []
;;                      (c/coll-of-c
;;                       (c/type-op c/call-value-op
;;                                  (c/multi [(c/param 'fn-arity11 1)
;;                                            (.required-arities c/fn-constraint [1])])
;;                                  [(c/type-op
;;                                    c/inner-type-of-op
;;                                    (c/multi
;;                                     [(c/param 'fn-arity11 0)
;;                                      (c/list-c []
;;                                                (c/coll-of-c
;;                                                 (c/type-op c/arg-of-op
;;                                                            (c/multi [(c/param 'fn-arity11 1)
;;                                                                      (.required-arities c/fn-constraint [1])])
;;                                                            0)))])
;;                                    [])]))))
;;           'fn-arity11
;;           [(c/list-c [(c/IntegerConstraint 1 2147483647 -2147483648)
;;                       (c/SymbolConstraint 'a)
;;                       (c/IntegerConstraint 3 2147483647 -2147483648)])
;;            (c/fn-c []
;;                    {1 (c/fn-arity 'fn-arity253
;;                                   (c/list-c [(c/param 'fn-arity253 0)])
;;                                   (c/param 'fn-arity253 0))})
;;            c/empty-list-constraint]
;;           (c/Location "" 88)))

;; (c/type-op c/call-value-op
;;            (c/param 'fn-arity238 1)
;;            [c/top-type])

;; (c/type-op c/call-value-op
;;            (c/param 'fn-arity238 1)
;;            [(c/multi [(c/type-op c/inner-type-of-op
;;                                  (c/param 'fn-arity238 0)
;;                                  [])
;;                       (c/coll-of-c (c/type-op c/arg-of-op
;;                                               (c/param 'fn-arity238 1)
;;                                               0))])])
