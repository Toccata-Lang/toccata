
(defn integer-str [n]
  (inline String "
   return(integer_str(n_0));
"))

(def vect1 (vector (integer-str 1) (integer-str 2) 3))
(def list1 (list (integer-str 4) (integer-str 5) 6))

(defn f0 [x y]
  (pr* (integer-str x))
  (pr* " ")
  (pr* (integer-str y))
  (pr* "\n"))

(defn f1 [x y & z]
  (pr* x)
  (pr* " ")
  (pr* y)
  (pr* "\n")
  (let [[a b] z]
    (pr* (integer-str a))
    (pr* " ")
    (pr* (integer-str b))
    (pr* "\n")))

(defn f2 [[x y z] & tail]
  (pr* x)
  (pr* " ")
  (pr* "\n"))

(defn f3 [[x y z] & tail]
  (pr* x)
  (pr* " ")
  (pr* y)
  (pr* " ")
  (pr* (integer-str z))
  (pr* " ")
  (let [[a b] tail]
    (pr* (integer-str a))
    (pr* " ")
    (pr* (integer-str b)))
  (pr* "\n"))

(defn f4 [z]
  (let [[a b] z]
    (pr* a)
    (pr* " ")
    (pr* b)
    (pr* "\n")))

(def global-x 99)

(main [_]
  (pr* "Function destructuring\n")
  ;; (f0 1 2)
  (f1 (integer-str 1) (integer-str 2) 3 4)
  ;; (f2 vect1 10 11)
  ;; (f3 list1 10 11)
  ;; (f3 vect1 10 11)
  ;; (f4 vect1)
  ;; (pr* (integer-str global-x))
  (pr* "\n")
  (pr* "Vectors and Lists! Oh my!\n"))
