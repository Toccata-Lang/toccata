
(defn integer-str [n]
  (inline String "
   return(integer_str(n_0));
"))

(defn cons [x l]
  ;; Add a value `x` to the head of list `l`
  (inline "
   Value *listVal = (Value *)listCons(x_0, (List *)l_1);
   return(listVal);\n"))

(defn list-map [l lf]
  (inline List "return(listMap(l_0, lf_1));"))

(defn f
  ([x]
   (pr* (integer-str x))
   (pr* "\n"))
  ([x & xs]
   (list-map (cons x xs) (fn [x]
                           (pr* (integer-str x))
                           (pr* " ")))
   (pr* "\n")))

(main [_]
      (f 1)
      (f 4 5 6 7))
