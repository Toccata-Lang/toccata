
(deftype AType [v]
  (assert (instance? Vector v))
  (assert (instance? (min-count 1) v)))

(defn lr1 [l result f]
  (either (maybe l)
          (lr1 (rest l) (f empty-list 1) f))
  l)

(defn lr2 [l result f]
  (either (maybe l)
          (lr2 (rest l) (f empty-list 1) f)))

(defn p1 [coll n]
  (lr1 coll (list "a" "b")
       (fn inner-p [q x]
         n
         (to-str q)))
  (lr2 coll (list "a" "b")
       (fn inner-p [q x]
         n
         (to-str q))))

(defn p2 [coll n]
  (reduce coll (list "a" "b")
          (fn [q x]
            (to-str q))))

(defn lr3 [l result f]
  (either (empty? l)
          (lr3 (rest l) (f result (extract (first l))) f)))

(defn p3 [coll n]
  (lr3 coll (list "a" "b")
       (fn inner-p [q x]
         n
         (to-str q)))
  (lr3 coll (list "a" "b")
       (fn other-inner-p [q x]
         (either (= n 2 2)
                 5))))

(defn p4 [coll n]
  (reduce coll (list "a" "b")
          (fn [q x]
            n)))

(defn p5 [v]
  (either (and (empty? v)
               (maybe 'Nope))
          (AType v)))

(main [_]
  (p1 (list 'c 3) 2)
  (p2 (list 'c 3) 2)
  (p3 (list 'c 3) 2)
  (p4 (list 'c 3) 2)
  (p5 []))
