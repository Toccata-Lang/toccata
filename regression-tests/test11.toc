
(defn add-ints [x y]
  (inline Integer "
   return(add_ints(x_0, y_1));
"))

(defn inc-int [x]
  (inline Integer "
    if (x_0->refs == 1) {
      ((Integer *)x_0)->numVal++;
      return x_0;
    } else {
      Value *numVal = integerValue(((Integer *)x_0)->numVal + 1);
      dec_and_free(x_0, 1);
      return(numVal);
    } "))

(def vect1 (vector 1 (inc-int 1) 3))
(def list1 (list (inc-int 3) 5 6))

(defn integer-str [n]
  (inline String "
   return(integer_str(n_0));
"))

(defn f1 [[x y z]]
  (pr* (integer-str x))
  (pr* (integer-str x))
  (pr* " ")
  (pr* (integer-str y))
  (pr* (integer-str y))
  (pr* " ")
  (pr* (integer-str z))
  (pr* (integer-str z))
  (pr* "\n"))

(main [_]
  (let [[x y] vect1]
    (pr* (integer-str x))
    (pr* " ")
    (pr* (integer-str y))
    (pr* " "))
  (let [[a b c] list1]
    (pr* (integer-str a))
    (pr* " ")
    (pr* (integer-str b))
    (pr* " ")
    (pr* (integer-str c))
    (pr* "\n"))
  (pr* "Now for the local call sites\n")
  (let [two (inc-int 1)
        [x y z] (vector 1 two 3)]
    (add-ints x y)
    (pr* (integer-str x))
    (pr* " ")
    (pr* (integer-str y))
    (pr* " ")
    (pr* (integer-str z))
    (pr* " "))
  (let [four (inc-int 3)
        [a b c & rst] (list four 5 6 (inc-int 9))]
    (pr* (integer-str a))
    (pr* " ")
    (pr* (integer-str b))
    (pr* " ")
    (pr* (integer-str c))
    (pr* "\n")
    )
  (pr* "Function destructuring\n")
  (f1 vect1)
  (f1 list1)
  (pr* "Vectors and Lists! Oh my!\n"))
