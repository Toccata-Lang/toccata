
(defn add-ints [x y]
  (inline Integer "
   return(add_ints(x_0, y_1));
"))

(defn integer-str [n]
  (inline String "
   return(integer_str(n_0));
"))

(def msg1 "Howdy Folks 10\n")
(def msg2 msg1)
(def int1 (let [x (add-ints 1 7)
                y (add-ints 4 5)]
            (add-ints x
                      (add-ints 4 5))
            x))

(def int2 (let [x (add-ints 1 7)
                y (add-ints 4 5)]
            (add-ints x
                      (add-ints 4 5))
            x
            (add-ints
             (add-ints 1 7)
             y)))
(def int3 (pr* "for int3\n"))

(main [_]
  (let [x (add-ints 6 3)
        y (add-ints 8 2)
        z "yaba yaba"]
    (pr* (integer-str (add-ints x y)))
    (pr* "\n")
    (pr* z)
    (pr* "\n"))
  (let [x (add-ints 6 3)
        y (add-ints 8 2)]
    (pr* (integer-str (add-ints x y)))
    x
    (pr* "\n"))
  (let [x (add-ints 6 3)
        y (add-ints 8 2)]
    (pr* (integer-str (add-ints x y)))
    (pr* "\n")
    y)
  (let [x (add-ints 6 3)
        y (add-ints 8 2)]
    (pr* (integer-str (add-ints x y)))
    x
    (pr* "\n")
    y)
  (pr* (integer-str (add-ints (pr* "one str ")
                              (pr* "two str\n"))))
  (pr* "\n")
  (pr* (integer-str int1))
  (pr* "\n")
  (pr* msg2)
  (let [v (pr* "one str ")]
    (pr* (integer-str (add-ints v
                                (pr* "two str\n"))))))
