
(add-ns rt (module "regression-tester.toc"))

(deftype EmptyType []
  Stringable
  (string-list [_] '("<EmptyType>")))

(deftype BogusType [z]
  ;; blow it up

  ;; TODO: fix this
  ;; Container
  ;; (apply* [_ [arg & args]]
  ;;   (print-err 'arg arg 'args args))
  )

(defprotocol BogusProtocol
  (bogus [x y]
    (str x)))

;; (def new-bogus bogus)

(deftype OneType [x]
  (assert (instance? Integer x))

  Stringable
  (string-list [_] (list "<OneType " (str x) ">")))

(deftype AnotherType [x z]
  (assert (instance? Integer x))
  (assert (instance? Symbol z))

  Stringable
  (string-list [_] (list "<AnotherType " (str z) ">")))

(def BothTypes (any-of OneType
                       AnotherType))

(def ReifiedType
  (reify
    Stringable
    (string-list [_] (list "<ReifiedType>"))))

(defn foo [x]
  (assert (instance? BothTypes x))
  (str x))

(defn f-instance [n]
  (assert-result x (instance? BothTypes x))
  (either (and (= 1 n)
               (maybe (OneType n)))
          (AnotherType n (symbol (str n)))))

(extend-type BogusType
  Stringable
  (string-list [x] (list "<BogusType " (str (.z x)) ">"))

  BogusProtocol
  (bogus [x y]
    (+ y 10)))

(deftype AssocType [m]
  (assert (instance? HashMap m))

  Associative
  (assoc [at k v]
    (either (and (< 0 k 4)
                 (maybe (AssocType (assoc m k v))))
            at))

  (get [_ k]
    (and (< 0 k 4)
         (get m k))))

(def f1)

(defn f2 [x]
  (f1 x))

(def f1
  (reify
    Function
    (invoke [_ x]
      (+ x 10))))

(defn make-reified-value [z]
  (reify
    Eq
    (=* [x y]
      (and (= (get-type x) (get-type y))
           (maybe x)))

    Stringable
    (string-list [_]
      (list "<ReifiedValue " (str z) ">"))))

(defprotocol Impls
  ;; For AST nodes that can be embedded in other AST nodes
  (call-this [_]
    (assert-result x (instance? Integer x)))

  ;; Mark this AST node as the final (or tail) expression in a function body
  (dont-call [x y z]))

(defn test []
  (println "Check deftypes regressions")
  (rt/test (= 15 (f2 5))
           _FILE_ _LINE_)

  (rt/test (instance? BothTypes (OneType (inc 12)))
           _FILE_ _LINE_)

  (rt/test (= (AnotherType (inc 4) 'z) (apply AnotherType [(inc 4) 'z]))
           _FILE_ _LINE_)
  (rt/test (instance? BothTypes (AnotherType (inc 4) 'z))
           _FILE_ _LINE_)

  (rt/test (instance? String (foo (OneType (inc 4))))
           _FILE_ _LINE_)

  (rt/test (instance? String (foo (AnotherType (inc 9) 'z)))
           _FILE_ _LINE_)

  (rt/test (instance? OneType (f-instance 1))
           _FILE_ _LINE_)

  (rt/test (instance? AnotherType (f-instance 3))
           _FILE_ _LINE_)

  (rt/test (= "<ReifiedType>" (str ReifiedType))
           _FILE_ _LINE_)
  (rt/test (= "<ReifiedValue 9>" (str (make-reified-value 9)))
           _FILE_ _LINE_)
  (rt/test (= "<ReifiedValue 8>" (str (make-reified-value 8)))
           _FILE_ _LINE_)
  (rt/test (= (make-reified-value 9) (make-reified-value 8))
           _FILE_ _LINE_)

  (rt/test (= "<AnotherType bogus>" (str (AnotherType 10 'bogus)))
           _FILE_ _LINE_)

  (rt/test (= nothing (= (get-type [1]) (get-type (list 1 2))))
           _FILE_ _LINE_)
  (rt/test (= (get-type (list 1)) (get-type (list 2)))
           _FILE_ _LINE_)
  (rt/test (= nothing (= (get-type (list 1)) (get-type [1])))
           _FILE_ _LINE_)

  (let [one (inc 0)
        bt (BogusType one)
        [x] (type-args bt)]

    (rt/test (= "* BogusType constructor at /home/jim/toccata/regression-tests/types-regressions.toc: 8 *"
                (type-name BogusType))
             _FILE_ _LINE_)
    (rt/test (= "<ValueConstructor BogusType [z]>" (str BogusType))
             _FILE_ _LINE_)
    (rt/test (= "BogusType" (type-name bt))
             _FILE_ _LINE_)
    (rt/test (instance? BogusType bt)
             _FILE_ _LINE_)
    (rt/test (= 1 x)
             _FILE_ _LINE_)
    (rt/test (= 1 (.z bt))
             _FILE_ _LINE_)
    (rt/test (= (maybe 1) (get bt .z))
             _FILE_ _LINE_)
    (rt/test (= (maybe 2) (get (.z bt (inc 1)) .z))
             _FILE_ _LINE_)
    (rt/test (= (maybe 2) (get (assoc bt .z (inc 1)) .z))
             _FILE_ _LINE_)
    (rt/test (= nothing (get bt .x))
             _FILE_ _LINE_)
    (rt/test (= bt (assoc bt .x 2))
             _FILE_ _LINE_)

    (rt/test (= (BogusType (inc 0)) bt)
             _FILE_ _LINE_)
    (rt/test (= (maybe (inc 4)) (get (assoc bt .z (inc 4)) .z))
             _FILE_ _LINE_))
  
  (rt/test (instance? BogusType (extract (= (BogusType 9) (BogusType 9))))
           _FILE_ _LINE_)
  (rt/test (instance? Integer (inc 7))
           _FILE_ _LINE_)

  (let [at (AssocType {5 'a 3 'b})]
    (rt/test (= {5 'a 3 'b} (.m (assoc at 5 'c)))
             _FILE_ _LINE_)
    (rt/test (= {5 'a 3 'c} (.m (assoc at 3 'c)))
             _FILE_ _LINE_)
    (rt/test (= (maybe 'b) (get at 3))
             _FILE_ _LINE_)
    (rt/test (= nothing (get at 5))
             _FILE_ _LINE_))

  (let [closure 9
        x (reify
            Impls
            (dont-call [x y z]
              (print-err 'FAIL)
              (abort))
            (call-this [_]
              (inc closure)))]
    (call-this x))

  (rt/test (= "8" (bogus 8 'howdy))
           _FILE_ _LINE_)

  ;; TODO: this needs to be fixed
  ;; (rt/test (= "8" (new-bogus 8 'howdy))
  ;;          _FILE_ _LINE_)

  (println "Types are good"))

