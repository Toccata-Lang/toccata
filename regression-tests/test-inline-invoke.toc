
(deftype Error [val state]
  Stringable
  (string-list [_] 
    (list "(Error " (str val) ")")))

(deftype new-se [invoke-fn]
  (assert (instance? Fn invoke-fn))

  Stringable
  (string-list [x]
    (comp (list "<new-se ")
          (string-list (.invoke-fn x))
          (list ">")))

  Function
  (invoke [ev s]
    (invoke-fn s))

  Container
  (map [ev f]
    (new-se (fn [st]
              (let [x (invoke-fn st)]
                (either (instance? Error x)
                        (let [[v new-s] x]
                          [(f v) new-s]))))))

  (wrap [_ v]
    (new-se (fn [s]
              [v s])))

  (flat-map [ev f]
    (new-se (fn [s]
              (let [x (invoke-fn s)]
                (either (instance? Error x)
                        (let [[v new-s] x]
                          ((f v) new-s))))))))

(defn state-error [v]
  (new-se (fn [s]
            [v s])))

(defn tc [sym]
  (let [s 'sumptin]
    (flat-map (state-error 'checking)
              (fn [_]
                (print-err 'test 2 s)
                (map (state-error 'again)
                     (fn [c]
                       (or (instance? Symbol s)
                           (abort))
                       c))))))

(main [_]
  (print-err ((tc 'some-sym)
              {'module (list {'some-sym 'blewie})})))
