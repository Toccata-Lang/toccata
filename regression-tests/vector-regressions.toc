
(add-ns rt (module "regression-tester.toc"))

(def three-vect (vector (inc 0) (inc 1) (inc 2)))

(defn f [x]
  (vector (inc x)))

(defn double [x]
  (* 2 x))

(defn g [x]
  (vector (double x)))

(defn int-vect [n]
  (vec (range n)))

(defn test []
  (println "Check vector regressions")
  (rt/test (instance? Vector [(inc 0) (inc 1) (inc 2)])
           _FILE_ _LINE_)
  (rt/test (= nothing (instance? Vector (char 66)))
           _FILE_ _LINE_)
  (rt/test (= "Vector" (type-name [1 2 3]))
           _FILE_ _LINE_)
  (rt/test (= [1 2 3] (type-args [1 2 3]))
           _FILE_ _LINE_)
  (rt/test (= 3 (count three-vect))
           _FILE_ _LINE_)
  (rt/test (= (maybe 3) (get [(inc 2)] (dec 1)))
           _FILE_ _LINE_)
  (rt/test (= nothing (get [(inc 1)] (dec 2)))
           _FILE_ _LINE_)
  (rt/test (= (maybe 2) (nth [1 (inc 1) 3] (dec 2)))
           _FILE_ _LINE_)
  (rt/test (= nothing (nth [1 2 3] (inc 2)))
           _FILE_ _LINE_)
  (rt/test (= [3] (vector 3))
           _FILE_ _LINE_)
  (rt/test (= [[3]] (vector [(inc 2)]))
           _FILE_ _LINE_)
  (rt/test (= [3] (conj [] (inc 2)))
           _FILE_ _LINE_)
  (rt/test (= 3 (count (conj (conj (conj [] (inc 2)) (inc 1)) (inc 0))))
           _FILE_ _LINE_)
  (rt/test (= [3 2 1] (conj (conj (conj [] 3) 2) 1))
           _FILE_ _LINE_)
  (rt/test (empty? [])
           _FILE_ _LINE_)
  (rt/test (= nothing (empty? [3]))
           _FILE_ _LINE_)
  (rt/test (= [] (subvec [(inc 1) (subs "01" 1) (inc 2)] (inc 90)))
           _FILE_ _LINE_)
  (rt/test (= [] (subvec [(inc 1) (subs "01" 1) (inc 2)] (inc 90) (inc 0)))
           _FILE_ _LINE_)
  (rt/test (= ["1" 3] (subvec [2 (subs "01" 1) 3] 1))
           _FILE_ _LINE_)
  (rt/test (= ["1"] (subvec [(inc 1) (subs "01" 1) (inc 2)] (inc 0) (inc 0)))
           _FILE_ _LINE_)
  (rt/test (= ["1" 3] (subvec [(inc 1) (subs "01" 1) (inc 2)] (inc 0) (inc 6)))
           _FILE_ _LINE_)
  (rt/test (empty? (rest []))
           _FILE_ _LINE_)
  (rt/test (= nothing (= [1 2 3] 1))
           _FILE_ _LINE_)
  (rt/test (= 2 (count (comp [1 2])))
           _FILE_ _LINE_)
  (rt/test (= 4 (count (comp [1 2] [3 4])))
           _FILE_ _LINE_)
  (rt/test (= 6 (count (comp [1 2] [3 (inc 3)] [(inc 4) 6])))
           _FILE_ _LINE_)
  (rt/test (= 6 (count (comp [1 (inc 1)] [] [3 4] (empty []) [(inc 4) 6])))
           _FILE_ _LINE_)
  (rt/test (empty? (empty [1 2]))
           _FILE_ _LINE_)
  (let [inc-val (inc 0)]
    (rt/test (= 4 (count (filter [(inc 0) 2 3 1 (inc 0) (inc 4) 1 6 (inc 6)]
                                 (fn [x] (= x inc-val)))))
             _FILE_ _LINE_))
  (let [inc-val (inc 0)]
    (rt/test (= 4 (count (filter [(inc 0) 2 3 1 (inc 0) (inc 4) 1 6 (inc 6)]
                                 (fn [& xs] (let [[x] xs] (= x inc-val))))))
             _FILE_ _LINE_))
  (let [inc-val (inc 0)]
    (rt/test (= [2 3 4] (map [1 2 3] (fn [x] (+ inc-val x))))
             _FILE_ _LINE_)
    (rt/test (= [2 3 4] (map [1 (inc 1) 3] (reify
                                             Function
                                             (invoke [_ x]
                                               (+ inc-val x)))))
             _FILE_ _LINE_))
  (let [inc-val (inc 0)]
    (rt/test (= [2 3 4] (map [1 2 3] (fn [& xs] (let [[x] xs] (+ inc-val x)))))
             _FILE_ _LINE_))
  (rt/test (= 6 (reduce [(inc 2) (inc 1) 1] 0 +))
           _FILE_ _LINE_)
  (rt/test (= [2] (wrap [1 2 3] (inc 1)))
           _FILE_ _LINE_)
  (let [inc-val (inc 0)]
    (rt/test (= [1 2 4] (flat-map [0 (inc 0) 3]
                                  (fn [x]
                                    [(+ inc-val x)])))
             _FILE_ _LINE_))
  (rt/test (= (maybe 3) (last [1 2 (inc 2)]))
           _FILE_ _LINE_)
  (rt/test (= nothing (last []))
           _FILE_ _LINE_)
  (rt/test (= (maybe [55]) (store [] (dec 1) (inc 54)))
           _FILE_ _LINE_)
  (rt/test (= (maybe [55 2 3 4]) (store [(inc 0) 2 3 4] (dec 1) (inc 54)))
           _FILE_ _LINE_)
  (rt/test (= (maybe [1 2 55 4]) (store [(inc 0) 2 (inc 2) 4] (inc 1) (inc 54)))
           _FILE_ _LINE_)
  (rt/test (= (maybe [1 2 3 4 55]) (store [1 2 3 (inc 3)] (inc 3) (inc 54)))
           _FILE_ _LINE_)
  (rt/test (= nothing (store [(inc 0) 2 3 4] (inc 8) (inc 54)))
           _FILE_ _LINE_)
  (rt/test (= [3 4 1 2] (comp [(inc 2) 4] (list (inc 0) 2)))
           _FILE_ _LINE_)
  (rt/test (= "[]" (str []))
           _FILE_ _LINE_)
  (rt/test (= "[8, 1]" (str [8 1]))
           _FILE_ _LINE_)
  (rt/test (= (list 1 2 3) (seq three-vect))
           _FILE_ _LINE_)
  (rt/test (= [95 96 97 98 99] (subvec (int-vect 100) (inc 94)))
           _FILE_ _LINE_)
  (rt/test (= (maybe [24 55 26])
              (map (store (int-vect 40) 25 55) (fn [v]
                                                 (subvec v 24 3))))
           _FILE_ _LINE_)
  (rt/test (= 6000 (count (int-vect 6000)))
           _FILE_ _LINE_)
  (rt/test (= 2000 (count (reduce (seq (int-vect 2000)) [] conj)))
           _FILE_ _LINE_)
  (rt/test (= [30 31 2] (subvec (conj (int-vect (inc 31)) (inc 1)) 30))
           _FILE_ _LINE_)
  (rt/test (= [31 32 2] (subvec (conj (int-vect 33) (inc 1)) 31))
           _FILE_ _LINE_)
  (let [big-v (int-vect 65)]
    (rt/test (= 2080 (count (flat-map big-v (fn [x] (int-vect x)))))
             _FILE_ _LINE_))
  (let [[c] [(vector 1 2 3 4 5)]]
    (let [[a & b] c]
      (rt/test (and (= '(2 3 4 5) b)
                    (= [1 2 3 4 5] c))
               _FILE_ _LINE_)))
  (rt/test (= ['one 'two 'three] '[one two three])
           _FILE_ _LINE_)
  (rt/test (= ['one 2 'three] '[one 2 three])
           _FILE_ _LINE_)
  (rt/test (= ['one '(2 three) 'four] '[one (2 three) four])
           _FILE_ _LINE_)
  (let [[a b & c] (vector 1 2 3 4 5)]
    (rt/test (and (= 1 a)
                  (= 2 b)
                  (= '(3 4 5) c))
             _FILE_ _LINE_))
  (let [[a b & c] [1 2 3 4]]
    ((fn [x] x) (inc 1)))

  (rt/test (= (map (vector 12) (fn [x] x)) (vector 12))
           _FILE_ _LINE_)
  (rt/test (= (map (map (vector 2) inc) double)
              (map (vector 2) (fn [x]
                                (double (inc x)))))
           _FILE_ _LINE_)

  (rt/test (= (flat-map (vector 8) vector) (vector 8))
           _FILE_ _LINE_)
  (rt/test (= (flat-map (vector 4) f) (f 4))
           _FILE_ _LINE_)
  (rt/test (= (flat-map (vector 4) vector) (vector 4))
           _FILE_ _LINE_)
  (rt/test (= (vector 10)
              (flat-map (flat-map (vector 4) f) g)
              (flat-map (vector 4) (fn [x] (flat-map (f x) g))))
           _FILE_ _LINE_)

  (rt/test (= [1 2 3] (reverse [3 (inc 1) 1]))
           _FILE_ _LINE_)

  (rt/test (= 6 (reduce [(inc 2) (inc 1) (inc 0)] 0 +))
           _FILE_ _LINE_)

  (rt/test (= empty-vector (reverse empty-vector))
           _FILE_ _LINE_)

  (rt/test (= [1 2 3] (reverse [(inc 2) (inc 1) (inc 0)]))
           _FILE_ _LINE_)
  (let [[a [b c]] [1 [2 3] 4 5]]
    (rt/test (and (= a 1)
                  (= b 2)
                  (= c 3))
             _FILE_ _LINE_))

  (rt/test (= [] (apply [list] empty-list))
           _FILE_ _LINE_)
  (rt/test (= [] (apply-to inc []))
           _FILE_ _LINE_)
  (rt/test (= [2 3 4] (apply-to inc [1 2 3]))
           _FILE_ _LINE_)
  (rt/test (= [11 12 13 31 32 33] (apply-to + [1 2 3] [10 30]))
           _FILE_ _LINE_)
  (rt/test (= [] (apply-to + [1 2 3] [] [10 20 30]))
           _FILE_ _LINE_)
  (let [m (vector (subs "string" 2) (inc 4))]
    (sha1 m)
    (sha1 m))
  (let [[x y] (drop-while ['a 'b 1 3] (partial instance? Symbol))]
    (rt/test (= 2 (inc x))
             _FILE_ _LINE_))

  (println "Vectors are good"))
