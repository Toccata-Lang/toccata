
(add-ns rt (module "regression-tester.toc"))

;; TODO: this causes the compiler to blow the stack
;; infinite recursion while inlining
;; (extend-type Integer
;;   Container
;;   (map [n f]
;;     (either (= 0 n)
;;             (map (dec n) f))))

(def one (add-numbers (inc -2) (inc 1)))

(defn add-1-variadic [& x]
  (let [[x] x]
    (add-numbers 1 x)))

(defn no-op-fixed [_ _ _]
  nothing)

(defn no-op-variadic [& _]
  nothing)

(defn z [arg]
  (no-op-variadic arg))

(defn z* [arg]
  [(no-op-variadic arg)])

(defn z** [arg]
  (no-op-variadic arg)
  [(no-op-variadic arg)])

(defn y [& args]
  (let [[arg] args
        [_] args]
    (no-op-variadic arg)))

(defn y* [& args]
  (let [[arg] args]
    [(no-op-variadic arg)]))

(defn y** [& args]
  (let [[arg] args]
    (no-op-variadic arg)
    [(no-op-variadic arg)]))

(defn y*** [& args]
  (let [[arg] args]
    (map args no-op-variadic)))

(def add-1-invoke
  (reify
    Function
    (invoke [_ x]
      (inc x))))

(defn f2 []
  (let [x (inc 0)
        y x
        f (fn [] (+ x y))]
    (f)))

(defn f3 [y]
  (inc (let [_ (inc 99)]
         y)))

(defn triggers-bus-error [[arg & boom] s]
  'triggered)

(defn test []
  (println "Checking function regressions")
  (identity one)
  (rt/test (instance? Fn (fn [] one))
           _FILE_ _LINE_)
  (let [[a b & c] [(inc 0) 2 3 (inc 3)]]
    (identity one))
  (let [[a y & c] (list (inc 0) 2 3 (inc 3))]
    (identity one))
  (no-op-variadic one)
  (no-op-fixed one (inc 2) (inc 3))
  (z one)
  (z* one)
  (z** one)
  (y one (inc 2))
  (y* one)
  (y** one)
  (y*** one)
  (let [x (inc 9)]
    (map (list x) no-op-variadic))
  (let [new-str (str-malloc (inc 11))]
    (str-append new-str (str "file" "\n"))
    (y new-str))
  (let [new-str (str-malloc 12)
        _ (str-append new-str "bogus")
        _ (str-append new-str ".")]
    (str-append new-str "file\n")
    (no-op-variadic new-str))
  (let [new-str (str-malloc 12)
        l (list ["1"] 2 (list 'three) 'four)
        _ (str-append new-str "bogus")
        _ (str-append new-str ".")]
    (str-append new-str "file\n")
    (no-op-variadic new-str)
    (map (list new-str) no-op-variadic))
  (let [new-str (str-malloc 12)]
    (str-append new-str "file\n")
    (y* new-str))
  (let [new-str (str-malloc 12)]
    (str-append new-str "file\n")
    (y** new-str))
  (let [new-str (str-malloc 12)]
    (str-append new-str "file\n")
    (y*** new-str))
  (let [new-str (str-malloc 12)]
    (str-append new-str "file\n")
    (z* new-str))
  (let [new-str (str-malloc 12)]
    (str-append new-str "file\n")
    (z** new-str))
  (let [v [1]]
    (no-op-variadic v v v)
    (no-op-fixed v v v))
  (let [bogus (list "bogus")
        some-str "popper\n"
        v-fn (fn variadic-fn [& x] bogus)
        this-fn (fn this-fn
                  ([] bogus)
                  ([_] bogus)
                  ([_ _] bogus)
                  ([_ _ _] bogus)
                  ([_ _ _ _] bogus)
                  ([_ _ _ _ _] bogus)
                  ([_ _ _ _ _ _] bogus)
                  ([_ _ _ _ _ _ _] bogus)
                  ([_ _ _ _ _ _ _ _] bogus)
                  ([_ _ _ _ _ _ _ _ _] bogus))]
    (rt/test (= bogus (apply this-fn empty-list))
             _FILE_ _LINE_)
    (rt/test (= bogus (apply this-fn (list (inc 0))))
             _FILE_ _LINE_)
    (rt/test (= bogus (apply this-fn (list (inc 0)
                                            (inc 1))))
             _FILE_ _LINE_)
    (rt/test (= bogus (apply this-fn (list (inc 0)
                                            (inc 1)
                                            (inc 2))))
             _FILE_ _LINE_)
    (rt/test (= bogus (apply this-fn (list (inc 0)
                                            (inc 1)
                                            (inc 2)
                                            (inc 3))))
             _FILE_ _LINE_)
    (rt/test (= bogus (apply this-fn (list (inc 0)
                                            (inc 1)
                                            (inc 2)
                                            (inc 3)
                                            (inc 4))))
             _FILE_ _LINE_)
    (rt/test (= bogus (apply this-fn (list (inc 0)
                                            (inc 1)
                                            (inc 2)
                                            (inc 3)
                                            (inc 4)
                                            (inc 5))))
             _FILE_ _LINE_)
    (rt/test (= bogus (apply this-fn (list (inc 0)
                                            (inc 1)
                                            (inc 2)
                                            (inc 3)
                                            (inc 4)
                                            (inc 5)
                                            (inc 6))))
             _FILE_ _LINE_)
    (rt/test (= bogus (apply this-fn (list (inc 0)
                                            (inc 1)
                                            (inc 2)
                                            (inc 3)
                                            (inc 4)
                                            (inc 5)
                                            (inc 6)
                                            (inc 7))))
             _FILE_ _LINE_)
    (rt/test (= bogus (apply this-fn (list (inc 0)
                                            (inc 1)
                                            (inc 2)
                                            (inc 3)
                                            (inc 4)
                                            (inc 5)
                                            (inc 6)
                                            (inc 7)
                                            (inc 8))))
             _FILE_ _LINE_)
    (rt/test (= bogus (v-fn (inc 0) (inc 1)))
             _FILE_ _LINE_)
    (rt/test (= bogus (apply v-fn (list (inc 0) (inc 1) (inc 2))))
             _FILE_ _LINE_)
    (rt/test (= 3 (add-1-invoke (inc 1)))
             _FILE_ _LINE_)
    (apply add-1-variadic (list (inc 0))))
  (let [inc-val (inc 0)
        f1 (reify
             Function
             (invoke [_ x]
               (+ inc-val x)))
        f2 (fn [x]
             (+ inc-val x))
        f3 (fn [x]
             (inc x))
        f4 (fn [& xs]
             (let [[x] xs]
               (+ inc-val x)))]
    (rt/test (= (f1 9) (f2 9) (f3 9) (f4 9))
             _FILE_ _LINE_))

  (let [x (inc 0)
        fx (fn [_]
             (inc x))]
    (fx (inc 1)))

  (f2)

  (let [x (inc 0)
        fx (fn fx []
             (inc (let [_ (inc 99)]
                    x)))
        fy (fn fy []
             (list x)
             (list x))]
    (fy))

  (f3 (inc 0))

  (let [l (list 22)
        f (fn [h]
            l
            h
            (maybe l))]
    (f one))
  (let [l (seq "xy")]
    ((fn [x] (maybe l)) 0))

  ;; TODO: this generates bad code
  ;; (rt/test ((fn [x]
  ;;             (= 'y x))
  ;;           'y)
  ;;          _FILE_ _LINE_)

  (println "Functions are good"))
