#!/bin/bash

set -e

# $CC -O3 -g -fno-objc-arc -std=c99 -c core.c &&
# time `$CC -DCHECK_MEM_LEAK=1 -g -fno-objc-arc -std=c99 core.c -lpthread -latomic`  &&

# git checkout toccata.c &&
# $CC -O3 -g -o toccata -std=c99 core.c toccata.c -lpthread -latomic &&

# echo &&
# echo "restored" &&
# echo &&

# unfortunately this doesn't completely solve the problem
# sed -i 's/^\/\/ #line/#line/' new-toc.c &&

# cp good-core.toc core.toc &&
# time `./toccata toccata.toc > new-toc.tmp` &&
# # sed -i 's/^\/\/ #line/#line/' new-toc.c &&
# sed -i 's/maybe((FnArity/maybe((Vector/' new-toc.tmp &&
# awk '/^#$/ { printf "#line %d \"%s\"\n", NR+1, "new-toc.c"; next; } { print; }' new-toc.tmp > new-toc.c &&
# time `$CC -O3 -DCHECK_MEM_LEAK=1 -g -o new-toc -std=c99 core.c new-toc.c -lpthread -latomic`  &&

# echo &&
# echo "compiled" &&
# echo &&

cp new-core.toc core.toc &&
echo "" > failures &&

for file in \
assertion-tests/bad-add.toc \
assertion-tests/bad-agent-extract.toc \
assertion-tests/bad-agent-wrap.toc \
assertion-tests/bad-and-1.toc \
assertion-tests/bad-and-clause.toc \
assertion-tests/bad-constructor-param-2.toc \
assertion-tests/bad-flat-map-inner.toc \
assertion-tests/bad-function-returns-1.toc \
assertion-tests/bad-function-returns-2.toc \
assertion-tests/bad-inner-10.toc \
assertion-tests/bad-inner-11.toc \
assertion-tests/bad-inner-12.toc \
assertion-tests/bad-inner-13.toc \
assertion-tests/bad-inner-14.toc \
assertion-tests/bad-inner-15.toc \
assertion-tests/bad-inner-16.toc \
assertion-tests/bad-inner-1.toc \
assertion-tests/bad-inner-2.toc \
assertion-tests/bad-inner-3.toc \
assertion-tests/bad-inner-4.toc \
assertion-tests/bad-inner-5.toc \
assertion-tests/bad-inner-6.toc \
assertion-tests/bad-inner-7.toc \
assertion-tests/bad-inner-8.toc \
assertion-tests/bad-inner-9.toc \
assertion-tests/bad-inner-or.toc \
assertion-tests/bad-or-1.toc \
assertion-tests/bad-or-2.toc \
assertion-tests/bad-promise-extract.toc \
assertion-tests/bad-promise-wrap.toc \
assertion-tests/bad-setter-call-2.toc \
assertion-tests/bad-state-maybe-value-1.toc \
assertion-tests/bad-state-maybe-value-2.toc \
assertion-tests/bad-vector-of-1.toc \
assertion-tests/bad-vect-wrap.toc \
assertion-tests/butlast-inner-list.toc \
assertion-tests/butlast-inner.toc \
assertion-tests/checked-map-1.toc \
assertion-tests/checked-map-2.toc \
assertion-tests/conj-to-getter-result-1.toc \
assertion-tests/conj-to-getter-result-2.toc \
assertion-tests/contents-2.toc \
assertion-tests/deeply-nested-vector-1.toc \
assertion-tests/deeply-nested-vector-2.toc \
assertion-tests/dynamic-call-1.toc \
assertion-tests/dynamic-call-4.toc \
assertion-tests/dynamic-call-5.toc \
assertion-tests/dynamic-call-6.toc \
assertion-tests/dynamic-call-8.toc \
assertion-tests/dynamic-field-type-11.toc \
assertion-tests/dynamic-field-type-14.toc \
assertion-tests/dynamic-nested-value-1.toc \
assertion-tests/field-constraint.toc \
assertion-tests/flat-map-param.toc \
assertion-tests/get-field.toc \
assertion-tests/incompatible-tails.toc \
assertion-tests/init-type.toc \
assertion-tests/inner-drop.toc \
assertion-tests/insufficient-static-elements-1.toc \
assertion-tests/insufficient-static-elements-3.toc \
assertion-tests/insufficient-static-elements-4.toc \
assertion-tests/key-violation.toc \
assertion-tests/literal-hash-map-1.toc \
assertion-tests/literal-hash-map-2.toc \
assertion-tests/min-count.toc \
assertion-tests/missing-namespaced-sym.toc \
assertion-tests/nested-destruct-1.toc \
assertion-tests/nested-destruct-2.toc \
assertion-tests/nested-items-conflict.toc \
assertion-tests/partial-param.toc \
assertion-tests/propogate-inner-1.toc \
assertion-tests/propogate-inner-2.toc \
assertion-tests/propogate-through-seq.toc \
assertion-tests/propogate-through-vec.toc \
assertion-tests/proto-fn-min-count.toc \
assertion-tests/proto-fn-param.toc \
assertion-tests/static-fixed-dynamic-result-type-1.toc \
assertion-tests/unkown-field.toc \
assertion-tests/variadic-constraints.toc \
assertion-tests/vect-len.toc \

# assertion-tests/*.toc \

# bad error messagge
# assertion-tests/nested-destruct-1.toc \
# assertion-tests/nested-destruct-2.toc \
# assertion-tests/bad-and-2.toc \

do
   echo
   ./test-assertion $file
done &&
exit 1 &&

# test-assertion assertion-tests/min-count.toc &&
# test-assertion assertion-tests/deeply-nested-vector-2.toc &&

# run regression-tests/test-regressions.toc &&
# run testr.toc &&
# test-assertion assertion-tests/dynamic-field-type-1.toc &&
# test-assertion assertion-tests/bad-state-maybe-value-1.toc &&
# test-assertion assertion-tests/bad-state-maybe-value-2.toc &&
# test-assertion assertion-tests/bad-function-returns-1.toc &&
# test-assertion assertion-tests/bad-function-returns-2.toc &&
# time new-toc toccata.toc > /dev/null &&
# time `./new-toc new-toc.toc > bad.c` &&

# time `./new-toc toccata.toc > new-toc.tmp` &&
# # sed -i 's/^\/\/ #line/#line/' new-toc.c &&
# awk '/^#$/ { printf "#line %d \"%s\"\n", NR+1, "new-toc.c"; next; } { print; }' new-toc.tmp > new-toc.c &&
# time `$CC -O3 -DRECURSE_CLOSURES=1 -DCHECK_MEM_LEAK=1 -g -fno-objc-arc -o new-toc -std=c99 core.c new-toc.c -lpthread -latomic` &&

# echo &&
# echo "re-compiled" &&
# echo &&

# time new-toc toccata.toc > /dev/null &&
# time new-toc test.toc > /dev/null &&
# run test.toc &&
# exit 1 &&

# time `./new-toc scripter.toc > m.tmp` &&
# awk '/^#$/ { printf "#line %d \"%s\"\n", NR+1, "scripter.c"; next; } { print; }' m.tmp > scripter.c &&
# $CC -g -fno-objc-arc -o scripter -std=c99 core.c scripter.c -lpthread &&
# ./scripter test.toc &&
# exit 1 &&

# for git bisect
# status=0
# ./new-toc toccata.toc > new-toc.tmp || status=$?

# if [ "$status" -eq 125 ] || [ "$status" -gt 127 ]; then
#     status=1
# fi
# exit "$status"

for file in regression-tests/test*.toc
do
   echo
   echo "testing" $file
   ./test-regression $file
done &&

for file in assertion-tests/*.toc
do
   echo
   ./test-assertion $file
done &&

# for file in runtime-tests/*.toc
# do
#    echo
#    echo "testing" $file
#    ./test-runtime-check $file
# done &&

# time new-toc toccata.toc > /dev/null &&

echo "Regressions pass"

