#!/bin/bash

set -e

# $CC -O3 -g -fno-objc-arc -std=c99 -c core.c &&
# time `$CC -DCHECK_MEM_LEAK=1 -g -fno-objc-arc -std=c99 core.c -lpthread -latomic`  &&

# git checkout toccata.c &&
# sed -i 's/maybe((FnArity/maybe((Vector/' toccata.c &&
# $CC -O3 -g -o toccata -std=c99 core.c toccata.c -lpthread -latomic &&

# echo &&
# echo "restored" &&
# echo &&

# unfortunately this doesn't completely solve the problem
# sed -i 's/^\/\/ #line/#line/' new-toc.c &&

# cp good-core.toc core.toc &&
# time `./toccata toccata.toc > new-toc.tmp` &&
# # sed -i 's/^\/\/ #line/#line/' new-toc.c &&
# sed -i 's/maybe((FnArity/maybe((Vector/' new-toc.tmp &&
# awk '/^#$/ { printf "#line %d \"%s\"\n", NR+1, "new-toc.c"; next; } { print; }' new-toc.tmp > new-toc.c &&
time `$CC -O3 -DCHECK_MEM_LEAK=1 -g -o new-toc -std=c99 core.c new-toc.c -lpthread -latomic`  &&

echo &&
echo "compiled" &&
echo &&

cp new-core.toc core.toc &&
echo "" > failures &&

for file in \
assertion-tests/*.toc \
# assertion-tests/destruct-variadic-tail-2.toc \
# assertion-tests/extract-type-failure.toc \
# assertion-tests/items-constraints-1.toc \
# assertion-tests/items-constraints-2.toc \
# assertion-tests/items-constraints-3.toc \
# assertion-tests/nested-destruct.toc \
# assertion-tests/preserve-static-info-3.toc.test \
# assertion-tests/propogate-through-let.toc \
# assertion-tests/return-list-of-1.toc \
# assertion-tests/return-list-of-2.toc \
	
# assertion-tests/*.toc \

# bad error messagge
# assertion-tests/nested-destruct-1.toc \
# assertion-tests/nested-destruct-2.toc \
# assertion-tests/bad-and-2.toc \

do
   echo
   ./test-assertion $file
done &&
exit 1 &&

# test-assertion assertion-tests/min-count.toc &&
# test-assertion assertion-tests/deeply-nested-vector-2.toc &&

# run regression-tests/test-regressions.toc &&
# run testr.toc &&
# test-assertion assertion-tests/dynamic-field-type-1.toc &&
# test-assertion assertion-tests/bad-state-maybe-value-1.toc &&
# test-assertion assertion-tests/bad-state-maybe-value-2.toc &&
# test-assertion assertion-tests/bad-function-returns-1.toc &&
# test-assertion assertion-tests/bad-function-returns-2.toc &&
# time new-toc toccata.toc > /dev/null &&
# time `./new-toc new-toc.toc > bad.c` &&

# time `./new-toc toccata.toc > new-toc.tmp` &&
# # sed -i 's/^\/\/ #line/#line/' new-toc.c &&
# awk '/^#$/ { printf "#line %d \"%s\"\n", NR+1, "new-toc.c"; next; } { print; }' new-toc.tmp > new-toc.c &&
# time `$CC -O3 -DRECURSE_CLOSURES=1 -DCHECK_MEM_LEAK=1 -g -fno-objc-arc -o new-toc -std=c99 core.c new-toc.c -lpthread -latomic` &&

# echo &&
# echo "re-compiled" &&
# echo &&

# time new-toc toccata.toc > /dev/null &&
# time new-toc test.toc > /dev/null &&
# run test.toc &&
# exit 1 &&

# time `./new-toc scripter.toc > m.tmp` &&
# awk '/^#$/ { printf "#line %d \"%s\"\n", NR+1, "scripter.c"; next; } { print; }' m.tmp > scripter.c &&
# $CC -g -fno-objc-arc -o scripter -std=c99 core.c scripter.c -lpthread &&
# ./scripter test.toc &&
# exit 1 &&

# for git bisect
# status=0
# ./new-toc toccata.toc > new-toc.tmp || status=$?

# if [ "$status" -eq 125 ] || [ "$status" -gt 127 ]; then
#     status=1
# fi
# exit "$status"

for file in regression-tests/test*.toc
do
   echo
   echo "testing" $file
   ./test-regression $file
done &&

for file in assertion-tests/*.toc
do
   echo
   ./test-assertion $file
done &&

# for file in runtime-tests/*.toc
# do
#    echo
#    echo "testing" $file
#    ./test-runtime-check $file
# done &&

# time new-toc toccata.toc > /dev/null &&

echo "Regressions pass"

